
#include <solverlib/util.h>

#include <Eigen/Jacobi>
#include <Eigen/SVD>
#include <Eigen/Geometry>

#include <iostream>

void decomposeE( const Eigen::Matrix3d &E, Eigen::Matrix3d &R1, Eigen::Matrix3d &R2, Eigen::Vector3d &t )
{
    Eigen::Matrix3d normE = E / E.norm();
    
    Eigen::JacobiSVD<Eigen::Matrix3d> svdE(normE,Eigen::ComputeFullU|Eigen::ComputeFullV);
    
    Eigen::Matrix3d U = svdE.matrixU();
    Eigen::Matrix3d V = svdE.matrixV();
    
    // from theia sfm
    if (U.determinant() < 0) {
        U.col(2) *= -1.0;
    }
    
    if (V.determinant() < 0) {
        V.col(2) *= -1.0;
    }
    
    Eigen::Matrix3d D;
    D <<
    0,1,0,
    -1,0,0,
    0,0,1;
    
    Eigen::Matrix3d DT;
    DT <<
    0,-1,0,
    1,0,0,
    0,0,1;
    
    Eigen::Matrix3d VT = V.transpose().eval();
    
    t = U.col(2);
    
    R1 = U*D*VT;
    R2 = U*DT*VT;
}

//static inline Eigen::Matrix<double,1,3> get_planar_row(
//                                                const Eigen::Matrix3d &R,
//                                                const Eigen::Matrix<double,6,6> &w
//                                                )
//{
//    Eigen::Matrix<double,1,3> row;
//    row << R(0,0)*w(0,3) + R(0,0)*w(3,0) + R(0,1)*w(1,3) + R(0,1)*w(4,0) + R(0,2)*w(2,3) + R(0,2)*w(5,0) + R(1,0)*w(0,4) + R(1,0)*w(3,1) + R(1,1)*w(1,4) + R(1,1)*w(4,1) + R(1,2)*w(2,4) + R(1,2)*w(5,1) + R(2,0)*w(0,5) + R(2,0)*w(3,2) + R(2,1)*w(1,5) + R(2,1)*w(4,2) + R(2,2)*w(2,5) + R(2,2)*w(5,2), R(1,0)*w(0,2) + R(1,1)*w(1,2) + R(1,2)*w(2,2) - R(2,0)*w(0,1) - R(2,1)*w(1,1) - R(2,2)*w(2,1), R(0,0)*w(0,1) + R(0,1)*w(1,1) + R(0,2)*w(2,1) - R(1,0)*w(0,0) - R(1,1)*w(1,0) - R(1,2)*w(2,0);
//    return row;
//}

Eigen::Vector3d solve_planar_translation(
                                  const double y,
                                  const Eigen::Matrix<double,6,6> &w1,
                                  const Eigen::Matrix<double,6,6> &w2
                                  )
{
//    Eigen::Matrix<double,3,3> A;
//    A <<
//    get_planar_row(R,w1),
//    get_planar_row(R,w2),
//    get_planar_row(R,w3);
//    const Eigen::Matrix<double,3,1> xz = A.jacobiSvd(Eigen::ComputeFullV).matrixV().col(2);
//    Eigen::Vector3d t;
//    t << xz(1)/xz(0), 0, xz(2)/xz(0);
    double y2 = y*y;
    double a = (w1(0,1)*w2(1,2) - w1(1,2)*w2(0,1) - w1(0,1)*w2(2,1) - w1(1,0)*w2(1,2) + w1(1,2)*w2(1,0) + w1(2,1)*w2(0,1) + w1(1,0)*w2(2,1) - w1(2,1)*w2(1,0) - w1(0,1)*w2(2,1)*y2 + w1(2,1)*w2(0,1)*y2 + w1(0,1)*w2(1,0)*y - w1(1,0)*w2(0,1)*y - w1(1,2)*w2(2,1)*y + w1(2,1)*w2(1,2)*y);
    Eigen::Vector3d t;
    t <<
    -(w1(0,1)*w2(0,3) - w1(0,3)*w2(0,1) + w1(0,3)*w2(1,0) - w1(1,0)*w2(0,3) + w1(0,1)*w2(1,4) - w1(1,4)*w2(0,1) - w1(1,0)*w2(1,4) + w1(1,4)*w2(1,0) + w1(0,1)*w2(2,5) - w1(2,5)*w2(0,1) + w1(0,1)*w2(3,0) - w1(3,0)*w2(0,1) - w1(1,0)*w2(2,5) + w1(2,5)*w2(1,0) - w1(1,0)*w2(3,0) + w1(3,0)*w2(1,0) + w1(0,1)*w2(4,1) - w1(4,1)*w2(0,1) - w1(1,0)*w2(4,1) + w1(4,1)*w2(1,0) + w1(0,1)*w2(5,2) - w1(5,2)*w2(0,1) - w1(1,0)*w2(5,2) + w1(5,2)*w2(1,0) + w1(0,5)*w2(2,1)*y2 - w1(2,1)*w2(0,5)*y2 + w1(2,1)*w2(2,3)*y2 - w1(2,3)*w2(2,1)*y2 - w1(2,1)*w2(3,2)*y2 + w1(3,2)*w2(2,1)*y2 + w1(2,1)*w2(5,0)*y2 - w1(5,0)*w2(2,1)*y2 - w1(0,1)*w2(0,5)*y + w1(0,5)*w2(0,1)*y - w1(0,5)*w2(1,0)*y + w1(1,0)*w2(0,5)*y + w1(0,1)*w2(2,3)*y - w1(0,3)*w2(2,1)*y + w1(2,1)*w2(0,3)*y - w1(2,3)*w2(0,1)*y - w1(0,1)*w2(3,2)*y - w1(1,0)*w2(2,3)*y + w1(2,3)*w2(1,0)*y + w1(3,2)*w2(0,1)*y - w1(1,4)*w2(2,1)*y + w1(2,1)*w2(1,4)*y + w1(1,0)*w2(3,2)*y - w1(3,2)*w2(1,0)*y + w1(2,1)*w2(2,5)*y - w1(2,5)*w2(2,1)*y + w1(0,1)*w2(5,0)*y + w1(2,1)*w2(3,0)*y - w1(3,0)*w2(2,1)*y - w1(5,0)*w2(0,1)*y - w1(1,0)*w2(5,0)*y + w1(5,0)*w2(1,0)*y + w1(2,1)*w2(4,1)*y - w1(4,1)*w2(2,1)*y + w1(2,1)*w2(5,2)*y - w1(5,2)*w2(2,1)*y)/a,
    0,
    -(w1(0,3)*w2(1,2) - w1(1,2)*w2(0,3) - w1(0,3)*w2(2,1) + w1(2,1)*w2(0,3) - w1(1,2)*w2(1,4) + w1(1,4)*w2(1,2) - w1(1,4)*w2(2,1) + w1(2,1)*w2(1,4) - w1(1,2)*w2(2,5) + w1(2,5)*w2(1,2) - w1(1,2)*w2(3,0) + w1(3,0)*w2(1,2) + w1(2,1)*w2(2,5) - w1(2,5)*w2(2,1) + w1(2,1)*w2(3,0) - w1(3,0)*w2(2,1) - w1(1,2)*w2(4,1) + w1(4,1)*w2(1,2) + w1(2,1)*w2(4,1) - w1(4,1)*w2(2,1) - w1(1,2)*w2(5,2) + w1(5,2)*w2(1,2) + w1(2,1)*w2(5,2) - w1(5,2)*w2(2,1) + w1(0,1)*w2(0,5)*y2 - w1(0,5)*w2(0,1)*y2 - w1(0,1)*w2(2,3)*y2 + w1(2,3)*w2(0,1)*y2 + w1(0,1)*w2(3,2)*y2 - w1(3,2)*w2(0,1)*y2 - w1(0,1)*w2(5,0)*y2 + w1(5,0)*w2(0,1)*y2 - w1(0,1)*w2(0,3)*y + w1(0,3)*w2(0,1)*y - w1(0,1)*w2(1,4)*y + w1(1,4)*w2(0,1)*y - w1(0,5)*w2(1,2)*y + w1(1,2)*w2(0,5)*y - w1(0,1)*w2(2,5)*y + w1(0,5)*w2(2,1)*y - w1(2,1)*w2(0,5)*y + w1(2,5)*w2(0,1)*y - w1(0,1)*w2(3,0)*y + w1(3,0)*w2(0,1)*y - w1(1,2)*w2(2,3)*y + w1(2,3)*w2(1,2)*y - w1(0,1)*w2(4,1)*y + w1(4,1)*w2(0,1)*y + w1(1,2)*w2(3,2)*y + w1(2,1)*w2(2,3)*y - w1(2,3)*w2(2,1)*y - w1(3,2)*w2(1,2)*y - w1(0,1)*w2(5,2)*y - w1(2,1)*w2(3,2)*y + w1(3,2)*w2(2,1)*y + w1(5,2)*w2(0,1)*y - w1(1,2)*w2(5,0)*y + w1(5,0)*w2(1,2)*y + w1(2,1)*w2(5,0)*y - w1(5,0)*w2(2,1)*y)/a;
    return t;
}

Eigen::Vector3d solve_upright_translation(
                                          const double y,
                                          const Eigen::Matrix<double,6,6> &w1,
                                          const Eigen::Matrix<double,6,6> &w2,
                                          const Eigen::Matrix<double,6,6> &w3
                                          )
{
    const double t2 = y*y;
    const double t3 = t2*w1(0,1)*w2(1,0);
    const double t4 = t2*w1(2,1)*w2(0,1)*y;
    const double t5 = t2*w1(2,1)*w2(1,2);
    const double t6 = w1(0,1)*w2(1,2)*y;
    const double t7 = w1(1,2)*w2(1,0)*y;
    const double t8 = w1(2,1)*w2(0,1)*y;
    const double t9 = w1(1,0)*w2(2,1)*y;
    const double t91 = t2*w1(1,0)*w2(0,1);
    const double t92 = t2*w1(0,1)*w2(2,1)*y;
    const double t93 = t2*w1(1,2)*w2(2,1);
    const double t94 = w1(1,2)*w2(0,1)*y;
    const double t95 = w1(0,1)*w2(2,1)*y;
    const double t96 = w1(1,0)*w2(1,2)*y;
    const double t97 = w1(2,1)*w2(1,0)*y;
    const double t10 = t3 + t4 + t5 + t6 + t7 + t8 + t9 - t91 - t92 - t93 - t94 - t95 - t96 - t97;
    const double t11 = t10*w3(2,2);
    const double t12 = w1(0,1)*w2(1,2)*w3(0,2);
    const double t13 = w1(0,2)*w2(0,1)*w3(1,2);
    const double t14 = w1(1,2)*w2(0,2)*w3(0,1);
    const double t15 = w1(0,1)*w2(0,2)*w3(2,1);
    const double t16 = w1(0,2)*w2(1,2)*w3(1,0);
    const double t17 = w1(0,2)*w2(2,1)*w3(0,1);
    const double t18 = w1(1,0)*w2(0,2)*w3(1,2);
    const double t19 = w1(1,2)*w2(1,0)*w3(0,2);
    const double t20 = w1(2,1)*w2(0,1)*w3(0,2);
    const double t21 = w1(0,1)*w2(2,0)*w3(1,2);
    const double t22 = w1(0,2)*w2(1,0)*w3(2,1);
    const double t23 = w1(1,0)*w2(2,1)*w3(0,2);
    const double t24 = w1(1,2)*w2(0,1)*w3(2,0);
    const double t25 = w1(2,0)*w2(1,2)*w3(0,1);
    const double t26 = w1(2,1)*w2(0,2)*w3(1,0);
    const double t27 = w1(0,1)*w2(2,1)*w3(2,0);
    const double t28 = w1(1,0)*w2(1,2)*w3(2,0);
    const double t29 = w1(1,2)*w2(2,0)*w3(1,0);
    const double t30 = w1(2,0)*w2(0,1)*w3(2,1);
    const double t31 = w1(2,0)*w2(1,0)*w3(1,2);
    const double t32 = w1(2,1)*w2(2,0)*w3(0,1);
    const double t33 = w1(1,0)*w2(2,0)*w3(2,1);
    const double t34 = w1(2,0)*w2(2,1)*w3(1,0);
    const double t35 = w1(2,1)*w2(1,0)*w3(2,0);
    const double t36 = w1(0,0)*w2(0,1)*w3(1,2)*y;
    const double t37 = w1(0,1)*w2(1,0)*w3(0,2)*y;
    const double t38 = w1(0,1)*w2(1,2)*w3(0,0)*y;
    const double t39 = w1(0,2)*w2(0,1)*w3(1,0)*y;
    const double t40 = w1(1,0)*w2(0,2)*w3(0,1)*y;
    const double t41 = w1(1,2)*w2(0,0)*w3(0,1)*y;
    const double t42 = w1(0,0)*w2(1,2)*w3(1,0)*y;
    const double t43 = w1(0,0)*w2(2,1)*w3(0,1)*y;
    const double t44 = w1(0,1)*w2(0,0)*w3(2,1)*y;
    const double t45 = w1(1,0)*w2(0,0)*w3(1,2)*y;
    const double t46 = w1(1,2)*w2(1,0)*w3(0,0)*y;
    const double t47 = w1(2,1)*w2(0,1)*w3(0,0)*y;
    const double t48 = w1(0,0)*w2(1,0)*w3(2,1)*y;
    const double t49 = w1(0,1)*w2(2,0)*w3(1,0)*y;
    const double t50 = w1(1,0)*w2(0,1)*w3(2,0)*y;
    const double t51 = w1(1,0)*w2(2,1)*w3(0,0)*y;
    const double t52 = w1(2,0)*w2(1,0)*w3(0,1)*y;
    const double t53 = w1(2,1)*w2(0,0)*w3(1,0)*y;
    const double t54 = w1(0,2)*w2(2,1)*w3(1,2)*y;
    const double t55 = w1(1,2)*w2(0,2)*w3(2,1)*y;
    const double t56 = w1(1,2)*w2(2,2)*w3(0,1)*y;
    const double t57 = w1(2,1)*w2(1,2)*w3(0,2)*y;
    const double t58 = w1(2,2)*w2(0,1)*w3(1,2)*y;
    const double t59 = w1(0,1)*w2(2,2)*w3(2,1)*y;
    const double t60 = w1(1,0)*w2(2,2)*w3(1,2)*y;
    const double t61 = w1(2,2)*w2(1,2)*w3(1,0)*y;
    const double t62 = w1(2,2)*w2(2,1)*w3(0,1)*y;
    const double t63 = w1(1,2)*w2(2,1)*w3(2,0)*y;
    const double t64 = w1(2,0)*w2(1,2)*w3(2,1)*y;
    const double t65 = w1(2,1)*w2(2,0)*w3(1,2)*y;
    const double t66 = w1(2,1)*w2(2,2)*w3(1,0)*y;
    const double t67 = w1(2,2)*w2(1,0)*w3(2,1)*y;
    const double t68 = t2*w1(0,0)*w2(0,1)*w3(1,0);
    const double t69 = t2*w1(0,1)*w2(1,0)*w3(0,0);
    const double t70 = t2*w1(1,0)*w2(0,0)*w3(0,1);
    const double t71 = t2*w1(0,0)*w2(2,1)*w3(0,1)*y;
    const double t72 = t2*w1(0,1)*w2(0,0)*w3(2,1)*y;
    const double t73 = t2*w1(2,1)*w2(0,1)*w3(0,0)*y;
    const double t74 = t2*w1(0,1)*w2(0,2)*w3(2,1);
    const double t75 = t2*w1(0,2)*w2(2,1)*w3(0,1);
    const double t76 = t2*w1(2,1)*w2(0,1)*w3(0,2);
    const double t77 = t2*w1(0,0)*w2(2,1)*w3(1,2);
    const double t78 = t2*w1(1,0)*w2(2,2)*w3(0,1);
    const double t79 = t2*w1(1,2)*w2(0,0)*w3(2,1);
    const double t80 = t2*w1(2,1)*w2(1,2)*w3(0,0);
    const double t81 = t2*w1(2,2)*w2(0,1)*w3(1,0);
    const double t82 = t2*w1(0,1)*w2(2,1)*w3(2,0);
    const double t83 = t2*w1(2,0)*w2(0,1)*w3(2,1);
    const double t84 = t2*w1(2,1)*w2(2,0)*w3(0,1);
    const double t85 = t2*w1(0,1)*w2(2,2)*w3(2,1)*y;
    const double t86 = t2*w1(2,2)*w2(2,1)*w3(0,1)*y;
    const double t87 = t2*w1(1,2)*w2(2,2)*w3(2,1);
    const double t88 = t2*w1(2,2)*w2(2,1)*w3(1,2);
    const double t98 = w1(0,1)*w2(0,2)*w3(1,2);
    const double t99 = w1(0,2)*w2(1,2)*w3(0,1);
    const double t100 = w1(1,2)*w2(0,1)*w3(0,2);
    const double t101 = w1(0,1)*w2(2,1)*w3(0,2);
    const double t102 = w1(0,2)*w2(0,1)*w3(2,1);
    const double t103 = w1(0,2)*w2(1,0)*w3(1,2);
    const double t104 = w1(1,0)*w2(1,2)*w3(0,2);
    const double t105 = w1(1,2)*w2(0,2)*w3(1,0);
    const double t106 = w1(2,1)*w2(0,2)*w3(0,1);
    const double t107 = w1(0,1)*w2(1,2)*w3(2,0);
    const double t108 = w1(0,2)*w2(2,1)*w3(1,0);
    const double t109 = w1(1,0)*w2(0,2)*w3(2,1);
    const double t110 = w1(1,2)*w2(2,0)*w3(0,1);
    const double t111 = w1(2,0)*w2(0,1)*w3(1,2);
    const double t112 = w1(2,1)*w2(1,0)*w3(0,2);
    const double t113 = w1(0,1)*w2(2,0)*w3(2,1);
    const double t114 = w1(1,0)*w2(2,0)*w3(1,2);
    const double t115 = w1(1,2)*w2(1,0)*w3(2,0);
    const double t116 = w1(2,0)*w2(1,2)*w3(1,0);
    const double t117 = w1(2,0)*w2(2,1)*w3(0,1);
    const double t118 = w1(2,1)*w2(0,1)*w3(2,0);
    const double t119 = w1(1,0)*w2(2,1)*w3(2,0);
    const double t120 = w1(2,0)*w2(1,0)*w3(2,1);
    const double t121 = w1(2,1)*w2(2,0)*w3(1,0);
    const double t122 = w1(0,0)*w2(1,2)*w3(0,1)*y;
    const double t123 = w1(0,1)*w2(0,0)*w3(1,2)*y;
    const double t124 = w1(0,1)*w2(0,2)*w3(1,0)*y;
    const double t125 = w1(0,2)*w2(1,0)*w3(0,1)*y;
    const double t126 = w1(1,0)*w2(0,1)*w3(0,2)*y;
    const double t127 = w1(1,2)*w2(0,1)*w3(0,0)*y;
    const double t128 = w1(0,0)*w2(0,1)*w3(2,1)*y;
    const double t129 = w1(0,0)*w2(1,0)*w3(1,2)*y;
    const double t130 = w1(0,1)*w2(2,1)*w3(0,0)*y;
    const double t131 = w1(1,0)*w2(1,2)*w3(0,0)*y;
    const double t132 = w1(1,2)*w2(0,0)*w3(1,0)*y;
    const double t133 = w1(2,1)*w2(0,0)*w3(0,1)*y;
    const double t134 = w1(0,0)*w2(2,1)*w3(1,0)*y;
    const double t135 = w1(0,1)*w2(1,0)*w3(2,0)*y;
    const double t136 = w1(1,0)*w2(0,0)*w3(2,1)*y;
    const double t137 = w1(1,0)*w2(2,0)*w3(0,1)*y;
    const double t138 = w1(2,0)*w2(0,1)*w3(1,0)*y;
    const double t139 = w1(2,1)*w2(1,0)*w3(0,0)*y;
    const double t140 = w1(0,1)*w2(2,2)*w3(1,2)*y;
    const double t141 = w1(0,2)*w2(1,2)*w3(2,1)*y;
    const double t142 = w1(1,2)*w2(2,1)*w3(0,2)*y;
    const double t143 = w1(2,1)*w2(0,2)*w3(1,2)*y;
    const double t144 = w1(2,2)*w2(1,2)*w3(0,1)*y;
    const double t145 = w1(1,2)*w2(2,2)*w3(1,0)*y;
    const double t146 = w1(2,1)*w2(2,2)*w3(0,1)*y;
    const double t147 = w1(2,2)*w2(0,1)*w3(2,1)*y;
    const double t148 = w1(2,2)*w2(1,0)*w3(1,2)*y;
    const double t149 = w1(1,0)*w2(2,2)*w3(2,1)*y;
    const double t150 = w1(1,2)*w2(2,0)*w3(2,1)*y;
    const double t151 = w1(2,0)*w2(2,1)*w3(1,2)*y;
    const double t152 = w1(2,1)*w2(1,2)*w3(2,0)*y;
    const double t153 = w1(2,2)*w2(2,1)*w3(1,0)*y;
    const double t154 = t2*w1(0,0)*w2(1,0)*w3(0,1);
    const double t155 = t2*w1(0,1)*w2(0,0)*w3(1,0);
    const double t156 = t2*w1(1,0)*w2(0,1)*w3(0,0);
    const double t157 = t2*w1(0,0)*w2(0,1)*w3(2,1)*y;
    const double t158 = t2*w1(0,1)*w2(2,1)*w3(0,0)*y;
    const double t159 = t2*w1(2,1)*w2(0,0)*w3(0,1)*y;
    const double t160 = t2*w1(0,1)*w2(2,1)*w3(0,2);
    const double t161 = t2*w1(0,2)*w2(0,1)*w3(2,1);
    const double t162 = t2*w1(2,1)*w2(0,2)*w3(0,1);
    const double t163 = t2*w1(0,0)*w2(1,2)*w3(2,1);
    const double t164 = t2*w1(0,1)*w2(2,2)*w3(1,0);
    const double t165 = t2*w1(1,2)*w2(2,1)*w3(0,0);
    const double t166 = t2*w1(2,1)*w2(0,0)*w3(1,2);
    const double t167 = t2*w1(2,2)*w2(1,0)*w3(0,1);
    const double t168 = t2*w1(0,1)*w2(2,0)*w3(2,1);
    const double t169 = t2*w1(2,0)*w2(2,1)*w3(0,1);
    const double t170 = t2*w1(2,1)*w2(0,1)*w3(2,0);
    const double t171 = t2*w1(2,1)*w2(2,2)*w3(0,1)*y;
    const double t172 = t2*w1(2,2)*w2(0,1)*w3(2,1)*y;
    const double t173 = t2*w1(2,1)*w2(2,2)*w3(1,2);
    const double t174 = t2*w1(2,2)*w2(1,2)*w3(2,1);
    const double t89 = t11 + t12 + t13 + t14 + t15 + t16 + t17 + t18 + t19 + t20 + t21 + t22 + t23 + t24 + t25 + t26 + t27 + t28 + t29 + t30 + t31 + t32 + t33 + t34 + t35 + t36 + t37 + t38 + t39 + t40 + t41 + t42 + t43 + t44 + t45 + t46 + t47 + t48 + t49 + t50 + t51 + t52 + t53 + t54 + t55 + t56 + t57 + t58 + t59 + t60 + t61 + t62 + t63 + t64 + t65 + t66 + t67 + t68 + t69 + t70 + t71 + t72 + t73 + t74 + t75 + t76 + t77 + t78 + t79 + t80 + t81 + t82 + t83 + t84 + t85 + t86 + t87 + t88 - t98 - t99 - t100 - t101 - t102 - t103 - t104 - t105 - t106 - t107 - t108 - t109 - t110 - t111 - t112 - t113 - t114 - t115 - t116 - t117 - t118 - t119 - t120 - t121 - t122 - t123 - t124 - t125 - t126 - t127 - t128 - t129 - t130 - t131 - t132 - t133 - t134 - t135 - t136 - t137 - t138 - t139 - t140 - t141 - t142 - t143 - t144 - t145 - t146 - t147 - t148 - t149 - t150 - t151 - t152 - t153 - t154 - t155 - t156 - t157 - t158 - t159 - t160 - t161 - t162 - t163 - t164 - t165 - t166 - t167 - t168 - t169 - t170 - t171 - t172 - t173 - t174;
    const double t90 = 1/t89;
    const double t175 = w1(0,1)*w2(0,2);
    const double t176 = w1(0,2)*w2(1,0);
    const double t177 = w1(2,0)*w2(0,1);
    const double t178 = w1(1,0)*w2(2,0);
    const double t179 = t2*w1(2,1)*w2(0,0);
    const double t180 = t2*w1(2,1)*w2(2,2);
    const double t181 = w1(0,1)*w2(0,0)*y;
    const double t182 = w1(0,0)*w2(1,0)*y;
    const double t183 = w1(0,1)*w2(2,2)*y;
    const double t184 = w1(2,1)*w2(0,2)*y;
    const double t185 = w1(2,2)*w2(1,0)*y;
    const double t186 = w1(2,0)*w2(2,1)*y;
    const double t188 = w1(0,2)*w2(0,1);
    const double t189 = w1(1,0)*w2(0,2);
    const double t190 = w1(0,1)*w2(2,0);
    const double t191 = w1(2,0)*w2(1,0);
    const double t192 = t2*w1(0,0)*w2(2,1);
    const double t193 = t2*w1(2,2)*w2(2,1);
    const double t194 = w1(0,0)*w2(0,1)*y;
    const double t195 = w1(1,0)*w2(0,0)*y;
    const double t196 = w1(0,2)*w2(2,1)*y;
    const double t197 = w1(2,2)*w2(0,1)*y;
    const double t198 = w1(1,0)*w2(2,2)*y;
    const double t199 = w1(2,1)*w2(2,0)*y;
    const double t187 = t175 + t176 + t177 + t178 + t179 + t180 + t181 + t182 + t183 + t184 + t185 + t186 - t188 - t189 - t190 - t191 - t192 - t193 - t194 - t195 - t196 - t197 - t198 - t199;
    const double t200 = t2*w1(0,0)*w2(0,1);
    const double t201 = t2*w1(1,0)*w2(0,0);
    const double t202 = t2*w1(0,0)*w2(2,1)*y;
    const double t203 = t2*w1(0,2)*w2(2,1);
    const double t204 = t2*w1(2,2)*w2(0,1);
    const double t205 = t2*w1(1,0)*w2(2,2);
    const double t206 = t2*w1(2,1)*w2(2,0);
    const double t207 = t2*w1(2,2)*w2(2,1)*y;
    const double t208 = w1(0,2)*w2(0,1)*y;
    const double t209 = w1(1,0)*w2(0,2)*y;
    const double t210 = w1(0,1)*w2(2,0)*y;
    const double t211 = w1(2,0)*w2(1,0)*y;
    const double t213 = t2*w1(0,1)*w2(0,0);
    const double t214 = t2*w1(0,0)*w2(1,0);
    const double t215 = t2*w1(2,1)*w2(0,0)*y;
    const double t216 = t2*w1(0,1)*w2(2,2);
    const double t217 = t2*w1(2,1)*w2(0,2);
    const double t218 = t2*w1(2,2)*w2(1,0);
    const double t219 = t2*w1(2,0)*w2(2,1);
    const double t220 = t2*w1(2,1)*w2(2,2)*y;
    const double t221 = w1(0,1)*w2(0,2)*y;
    const double t222 = w1(0,2)*w2(1,0)*y;
    const double t223 = w1(2,0)*w2(0,1)*y;
    const double t224 = w1(1,0)*w2(2,0)*y;
    const double t212 = t200 + t201 + t202 + t203 + t204 + t205 + t206 + t207 + t208 + t209 + t210 + t211 - t213 - t214 - t215 - t216 - t217 - t218 - t219 - t220 - t221 - t222 - t223 - t224;
    const double t225 = w1(0,1)*w2(1,2);
    const double t226 = w1(1,2)*w2(1,0);
    const double t227 = w1(2,1)*w2(0,1);
    const double t228 = w1(1,0)*w2(2,1);
    const double t229 = t2*w1(2,1)*w2(0,1);
    const double t230 = w1(0,1)*w2(1,0)*y;
    const double t231 = w1(2,1)*w2(1,2)*y;
    const double t233 = w1(1,2)*w2(0,1);
    const double t234 = w1(0,1)*w2(2,1);
    const double t235 = w1(1,0)*w2(1,2);
    const double t236 = w1(2,1)*w2(1,0);
    const double t237 = t2*w1(0,1)*w2(2,1);
    const double t238 = w1(1,0)*w2(0,1)*y;
    const double t239 = w1(1,2)*w2(2,1)*y;
    const double t232 = t225 + t226 + t227 + t228 + t229 + t230 + t231 - t233 - t234 - t235 - t236 - t237 - t238 - t239;
    const double t240 = t2*w1(0,0)*w2(0,1)*y;
    const double t241 = t2*w1(0,2)*w2(0,1);
    const double t242 = t2*w1(0,0)*w2(1,2);
    const double t243 = t2*w1(0,1)*w2(2,0);
    const double t244 = t2*w1(2,2)*w2(0,1)*y;
    const double t245 = t2*w1(2,2)*w2(1,2);
    const double t246 = w1(0,2)*w2(1,2)*y;
    const double t247 = w1(1,2)*w2(2,0)*y;
    const double t266 = t2*w1(0,1)*w2(0,0)*y;
    const double t267 = t2*w1(0,1)*w2(0,2);
    const double t268 = t2*w1(1,2)*w2(0,0);
    const double t269 = t2*w1(2,0)*w2(0,1);
    const double t270 = t2*w1(0,1)*w2(2,2)*y;
    const double t271 = t2*w1(1,2)*w2(2,2);
    const double t272 = w1(1,2)*w2(0,2)*y;
    const double t273 = w1(2,0)*w2(1,2)*y;
    const double t248 = t179 + t180 + t184 + t186 - t192 - t193 - t196 - t199 + t240 + t241 + t242 + t243 + t244 + t245 + t246 + t247 - t266 - t267 - t268 - t269 - t270 - t271 - t272 - t273;
    const double t249 = w1(0,2)*w2(1,2);
    const double t250 = w1(2,1)*w2(0,2);
    const double t251 = w1(1,2)*w2(2,0);
    const double t252 = w1(2,0)*w2(2,1);
    const double t253 = w1(0,0)*w2(1,2)*y;
    const double t254 = w1(2,1)*w2(0,0)*y;
    const double t255 = w1(2,2)*w2(1,2)*y;
    const double t256 = w1(2,1)*w2(2,2)*y;
    const double t258 = w1(1,2)*w2(0,2);
    const double t259 = w1(0,2)*w2(2,1);
    const double t260 = w1(2,0)*w2(1,2);
    const double t261 = w1(2,1)*w2(2,0);
    const double t262 = w1(1,2)*w2(0,0)*y;
    const double t263 = w1(0,0)*w2(2,1)*y;
    const double t264 = w1(1,2)*w2(2,2)*y;
    const double t265 = w1(2,2)*w2(2,1)*y;
    const double t257 = t200 + t204 + t208 + t210 - t213 - t216 - t221 - t223 + t249 + t250 + t251 + t252 + t253 + t254 + t255 + t256 - t258 - t259 - t260 - t261 - t262 - t263 - t264 - t265;
    Eigen::Vector3d t;
    t << t90*(w3(2,2)*(t2*w1(0,1)*w2(0,5) - t2*w1(0,5)*w2(0,1) + t2*w1(0,5)*w2(1,0) - t2*w1(1,0)*w2(0,5) - t2*w1(0,1)*w2(2,3) + t2*w1(0,3)*w2(2,1) - t2*w1(2,1)*w2(0,3) + t2*w1(2,3)*w2(0,1) + t2*w1(0,1)*w2(3,2) + t2*w1(1,0)*w2(2,3) - t2*w1(2,3)*w2(1,0) - t2*w1(3,2)*w2(0,1) + t2*w1(1,4)*w2(2,1) - t2*w1(2,1)*w2(1,4) - t2*w1(1,0)*w2(3,2) + t2*w1(3,2)*w2(1,0) - t2*w1(2,1)*w2(2,5) + t2*w1(2,5)*w2(2,1) - t2*w1(0,1)*w2(5,0) - t2*w1(2,1)*w2(3,0) + t2*w1(3,0)*w2(2,1) + t2*w1(5,0)*w2(0,1) + t2*w1(1,0)*w2(5,0) - t2*w1(5,0)*w2(1,0) - t2*w1(2,1)*w2(4,1) + t2*w1(4,1)*w2(2,1) - t2*w1(2,1)*w2(5,2) + t2*w1(5,2)*w2(2,1) - w1(0,1)*w2(0,3)*y + w1(0,3)*w2(0,1)*y - w1(0,3)*w2(1,0)*y + w1(1,0)*w2(0,3)*y - w1(0,1)*w2(1,4)*y + w1(1,4)*w2(0,1)*y + w1(1,0)*w2(1,4)*y - w1(1,4)*w2(1,0)*y - w1(0,1)*w2(2,5)*y + w1(2,5)*w2(0,1)*y - w1(0,1)*w2(3,0)*y + w1(3,0)*w2(0,1)*y + w1(1,0)*w2(2,5)*y - w1(2,5)*w2(1,0)*y + w1(1,0)*w2(3,0)*y - w1(3,0)*w2(1,0)*y - w1(0,1)*w2(4,1)*y + w1(4,1)*w2(0,1)*y + w1(1,0)*w2(4,1)*y - w1(4,1)*w2(1,0)*y - w1(0,1)*w2(5,2)*y + w1(5,2)*w2(0,1)*y + w1(1,0)*w2(5,2)*y - w1(5,2)*w2(1,0)*y - t2*w1(0,5)*w2(2,1)*y + t2*w1(2,1)*w2(0,5)*y - t2*w1(2,1)*w2(2,3)*y + t2*w1(2,3)*w2(2,1)*y + t2*w1(2,1)*w2(3,2)*y - t2*w1(3,2)*w2(2,1)*y - t2*w1(2,1)*w2(5,0)*y + t2*w1(5,0)*w2(2,1)*y) - w1(0,1)*w2(0,3)*w3(0,2) + w1(0,2)*w2(0,3)*w3(0,1) + w1(0,3)*w2(0,1)*w3(0,2) - w1(0,3)*w2(0,2)*w3(0,1) - w1(0,2)*w2(0,3)*w3(1,0) + w1(0,3)*w2(0,2)*w3(1,0) - w1(0,3)*w2(1,0)*w3(0,2) + w1(1,0)*w2(0,3)*w3(0,2) - w1(0,1)*w2(1,4)*w3(0,2) + w1(0,2)*w2(1,4)*w3(0,1) + w1(1,4)*w2(0,1)*w3(0,2) - w1(1,4)*w2(0,2)*w3(0,1) + w1(0,1)*w2(0,3)*w3(2,0) - w1(0,3)*w2(0,1)*w3(2,0) + w1(0,3)*w2(2,0)*w3(0,1) - w1(2,0)*w2(0,3)*w3(0,1) - w1(0,2)*w2(1,4)*w3(1,0) + w1(1,0)*w2(1,4)*w3(0,2) + w1(1,4)*w2(0,2)*w3(1,0) - w1(1,4)*w2(1,0)*w3(0,2) - w1(0,1)*w2(2,5)*w3(0,2) + w1(0,2)*w2(2,5)*w3(0,1) + w1(2,5)*w2(0,1)*w3(0,2) - w1(2,5)*w2(0,2)*w3(0,1) + w1(0,1)*w2(0,2)*w3(3,0) - w1(0,1)*w2(3,0)*w3(0,2) - w1(0,2)*w2(0,1)*w3(3,0) + w1(0,2)*w2(3,0)*w3(0,1) + w1(0,3)*w2(1,0)*w3(2,0) - w1(0,3)*w2(2,0)*w3(1,0) - w1(1,0)*w2(0,3)*w3(2,0) + w1(2,0)*w2(0,3)*w3(1,0) + w1(3,0)*w2(0,1)*w3(0,2) - w1(3,0)*w2(0,2)*w3(0,1) + w1(0,1)*w2(1,4)*w3(2,0) - w1(1,4)*w2(0,1)*w3(2,0) + w1(1,4)*w2(2,0)*w3(0,1) - w1(2,0)*w2(1,4)*w3(0,1) - w1(0,2)*w2(2,5)*w3(1,0) + w1(1,0)*w2(2,5)*w3(0,2) + w1(2,5)*w2(0,2)*w3(1,0) - w1(2,5)*w2(1,0)*w3(0,2) + w1(0,2)*w2(1,0)*w3(3,0) - w1(0,2)*w2(3,0)*w3(1,0) - w1(1,0)*w2(0,2)*w3(3,0) + w1(1,0)*w2(3,0)*w3(0,2) + w1(3,0)*w2(0,2)*w3(1,0) - w1(3,0)*w2(1,0)*w3(0,2) + w1(0,1)*w2(0,2)*w3(4,1) - w1(0,1)*w2(4,1)*w3(0,2) - w1(0,2)*w2(0,1)*w3(4,1) + w1(0,2)*w2(4,1)*w3(0,1) - w1(1,0)*w2(1,4)*w3(2,0) + w1(1,4)*w2(1,0)*w3(2,0) - w1(1,4)*w2(2,0)*w3(1,0) + w1(2,0)*w2(1,4)*w3(1,0) + w1(4,1)*w2(0,1)*w3(0,2) - w1(4,1)*w2(0,2)*w3(0,1) + w1(0,1)*w2(2,5)*w3(2,0) - w1(2,0)*w2(2,5)*w3(0,1) - w1(2,5)*w2(0,1)*w3(2,0) + w1(2,5)*w2(2,0)*w3(0,1) - w1(0,1)*w2(2,0)*w3(3,0) + w1(0,1)*w2(3,0)*w3(2,0) + w1(2,0)*w2(0,1)*w3(3,0) - w1(2,0)*w2(3,0)*w3(0,1) - w1(3,0)*w2(0,1)*w3(2,0) + w1(3,0)*w2(2,0)*w3(0,1) + w1(0,2)*w2(1,0)*w3(4,1) - w1(0,2)*w2(4,1)*w3(1,0) - w1(1,0)*w2(0,2)*w3(4,1) + w1(1,0)*w2(4,1)*w3(0,2) + w1(4,1)*w2(0,2)*w3(1,0) - w1(4,1)*w2(1,0)*w3(0,2) - w1(0,1)*w2(5,2)*w3(0,2) + w1(0,2)*w2(5,2)*w3(0,1) - w1(1,0)*w2(2,5)*w3(2,0) + w1(2,0)*w2(2,5)*w3(1,0) + w1(2,5)*w2(1,0)*w3(2,0) - w1(2,5)*w2(2,0)*w3(1,0) + w1(5,2)*w2(0,1)*w3(0,2) - w1(5,2)*w2(0,2)*w3(0,1) + w1(1,0)*w2(2,0)*w3(3,0) - w1(1,0)*w2(3,0)*w3(2,0) - w1(2,0)*w2(1,0)*w3(3,0) + w1(2,0)*w2(3,0)*w3(1,0) + w1(3,0)*w2(1,0)*w3(2,0) - w1(3,0)*w2(2,0)*w3(1,0) - w1(0,1)*w2(2,0)*w3(4,1) + w1(0,1)*w2(4,1)*w3(2,0) + w1(2,0)*w2(0,1)*w3(4,1) - w1(2,0)*w2(4,1)*w3(0,1) - w1(4,1)*w2(0,1)*w3(2,0) + w1(4,1)*w2(2,0)*w3(0,1) - w1(0,2)*w2(5,2)*w3(1,0) + w1(1,0)*w2(5,2)*w3(0,2) + w1(5,2)*w2(0,2)*w3(1,0) - w1(5,2)*w2(1,0)*w3(0,2) + w1(1,0)*w2(2,0)*w3(4,1) - w1(1,0)*w2(4,1)*w3(2,0) - w1(2,0)*w2(1,0)*w3(4,1) + w1(2,0)*w2(4,1)*w3(1,0) + w1(4,1)*w2(1,0)*w3(2,0) - w1(4,1)*w2(2,0)*w3(1,0) + w1(0,1)*w2(5,2)*w3(2,0) - w1(2,0)*w2(5,2)*w3(0,1) - w1(5,2)*w2(0,1)*w3(2,0) + w1(5,2)*w2(2,0)*w3(0,1) - w1(1,0)*w2(5,2)*w3(2,0) + w1(2,0)*w2(5,2)*w3(1,0) + w1(5,2)*w2(1,0)*w3(2,0) - w1(5,2)*w2(2,0)*w3(1,0) - t2*w1(0,0)*w2(0,5)*w3(0,1) + t2*w1(0,1)*w2(0,5)*w3(0,0) + t2*w1(0,5)*w2(0,0)*w3(0,1) - t2*w1(0,5)*w2(0,1)*w3(0,0) + t2*w1(0,0)*w2(0,5)*w3(1,0) - t2*w1(0,5)*w2(0,0)*w3(1,0) + t2*w1(0,5)*w2(1,0)*w3(0,0) - t2*w1(1,0)*w2(0,5)*w3(0,0) + t2*w1(0,0)*w2(0,3)*w3(2,1) + t2*w1(0,0)*w2(2,3)*w3(0,1) - t2*w1(0,1)*w2(2,3)*w3(0,0) - t2*w1(0,3)*w2(0,0)*w3(2,1) + t2*w1(0,3)*w2(2,1)*w3(0,0) - t2*w1(2,1)*w2(0,3)*w3(0,0) - t2*w1(2,3)*w2(0,0)*w3(0,1) + t2*w1(2,3)*w2(0,1)*w3(0,0) - t2*w1(0,2)*w2(0,5)*w3(2,1) + t2*w1(0,5)*w2(0,2)*w3(2,1) - t2*w1(0,5)*w2(2,1)*w3(0,2) + t2*w1(0,5)*w2(2,2)*w3(0,1) + t2*w1(2,1)*w2(0,5)*w3(0,2) - t2*w1(2,2)*w2(0,5)*w3(0,1) - t2*w1(0,0)*w2(2,3)*w3(1,0) - t2*w1(0,0)*w2(3,2)*w3(0,1) + t2*w1(0,1)*w2(3,2)*w3(0,0) + t2*w1(1,0)*w2(2,3)*w3(0,0) + t2*w1(2,3)*w2(0,0)*w3(1,0) - t2*w1(2,3)*w2(1,0)*w3(0,0) + t2*w1(3,2)*w2(0,0)*w3(0,1) - t2*w1(3,2)*w2(0,1)*w3(0,0) + t2*w1(0,0)*w2(1,4)*w3(2,1) - t2*w1(1,4)*w2(0,0)*w3(2,1) + t2*w1(1,4)*w2(2,1)*w3(0,0) - t2*w1(2,1)*w2(1,4)*w3(0,0) - t2*w1(0,5)*w2(2,2)*w3(1,0) + t2*w1(2,2)*w2(0,5)*w3(1,0) + t2*w1(0,0)*w2(3,2)*w3(1,0) - t2*w1(1,0)*w2(3,2)*w3(0,0) - t2*w1(3,2)*w2(0,0)*w3(1,0) + t2*w1(3,2)*w2(1,0)*w3(0,0) + t2*w1(0,0)*w2(2,5)*w3(2,1) + t2*w1(0,2)*w2(2,3)*w3(2,1) - t2*w1(0,3)*w2(2,2)*w3(2,1) - t2*w1(0,5)*w2(2,0)*w3(2,1) + t2*w1(0,5)*w2(2,1)*w3(2,0) + t2*w1(2,0)*w2(0,5)*w3(2,1) - t2*w1(2,1)*w2(0,5)*w3(2,0) - t2*w1(2,1)*w2(2,3)*w3(0,2) - t2*w1(2,1)*w2(2,5)*w3(0,0) + t2*w1(2,2)*w2(0,3)*w3(2,1) + t2*w1(2,2)*w2(2,3)*w3(0,1) - t2*w1(2,3)*w2(0,2)*w3(2,1) + t2*w1(2,3)*w2(2,1)*w3(0,2) - t2*w1(2,3)*w2(2,2)*w3(0,1) - t2*w1(2,5)*w2(0,0)*w3(2,1) + t2*w1(2,5)*w2(2,1)*w3(0,0) - t2*w1(0,0)*w2(0,1)*w3(5,0) - t2*w1(0,0)*w2(2,1)*w3(3,0) + t2*w1(0,0)*w2(3,0)*w3(2,1) + t2*w1(0,0)*w2(5,0)*w3(0,1) + t2*w1(0,1)*w2(0,0)*w3(5,0) - t2*w1(0,1)*w2(5,0)*w3(0,0) + t2*w1(2,1)*w2(0,0)*w3(3,0) - t2*w1(2,1)*w2(3,0)*w3(0,0) - t2*w1(3,0)*w2(0,0)*w3(2,1) + t2*w1(3,0)*w2(2,1)*w3(0,0) - t2*w1(5,0)*w2(0,0)*w3(0,1) + t2*w1(5,0)*w2(0,1)*w3(0,0) - t2*w1(0,2)*w2(3,2)*w3(2,1) + t2*w1(2,1)*w2(3,2)*w3(0,2) - t2*w1(2,2)*w2(2,3)*w3(1,0) - t2*w1(2,2)*w2(3,2)*w3(0,1) + t2*w1(2,3)*w2(2,2)*w3(1,0) + t2*w1(3,2)*w2(0,2)*w3(2,1) - t2*w1(3,2)*w2(2,1)*w3(0,2) + t2*w1(3,2)*w2(2,2)*w3(0,1) - t2*w1(1,4)*w2(2,2)*w3(2,1) + t2*w1(2,2)*w2(1,4)*w3(2,1) + t2*w1(0,0)*w2(1,0)*w3(5,0) - t2*w1(0,0)*w2(5,0)*w3(1,0) - t2*w1(1,0)*w2(0,0)*w3(5,0) + t2*w1(1,0)*w2(5,0)*w3(0,0) + t2*w1(5,0)*w2(0,0)*w3(1,0) - t2*w1(5,0)*w2(1,0)*w3(0,0) - t2*w1(0,0)*w2(2,1)*w3(4,1) + t2*w1(0,0)*w2(4,1)*w3(2,1) + t2*w1(2,1)*w2(0,0)*w3(4,1) - t2*w1(2,1)*w2(4,1)*w3(0,0) - t2*w1(4,1)*w2(0,0)*w3(2,1) + t2*w1(4,1)*w2(2,1)*w3(0,0) - t2*w1(2,0)*w2(2,3)*w3(2,1) + t2*w1(2,1)*w2(2,3)*w3(2,0) + t2*w1(2,2)*w2(3,2)*w3(1,0) + t2*w1(2,3)*w2(2,0)*w3(2,1) - t2*w1(2,3)*w2(2,1)*w3(2,0) - t2*w1(3,2)*w2(2,2)*w3(1,0) + t2*w1(2,2)*w2(2,5)*w3(2,1) - t2*w1(2,5)*w2(2,2)*w3(2,1) + t2*w1(0,0)*w2(5,2)*w3(2,1) + t2*w1(0,1)*w2(2,2)*w3(5,0) - t2*w1(0,2)*w2(2,1)*w3(5,0) + t2*w1(0,2)*w2(5,0)*w3(2,1) + t2*w1(2,0)*w2(3,2)*w3(2,1) + t2*w1(2,1)*w2(0,2)*w3(5,0) + t2*w1(2,1)*w2(2,2)*w3(3,0) - t2*w1(2,1)*w2(3,2)*w3(2,0) - t2*w1(2,1)*w2(5,0)*w3(0,2) - t2*w1(2,1)*w2(5,2)*w3(0,0) - t2*w1(2,2)*w2(0,1)*w3(5,0) - t2*w1(2,2)*w2(2,1)*w3(3,0) + t2*w1(2,2)*w2(3,0)*w3(2,1) + t2*w1(2,2)*w2(5,0)*w3(0,1) - t2*w1(3,0)*w2(2,2)*w3(2,1) - t2*w1(3,2)*w2(2,0)*w3(2,1) + t2*w1(3,2)*w2(2,1)*w3(2,0) - t2*w1(5,0)*w2(0,2)*w3(2,1) + t2*w1(5,0)*w2(2,1)*w3(0,2) - t2*w1(5,0)*w2(2,2)*w3(0,1) - t2*w1(5,2)*w2(0,0)*w3(2,1) + t2*w1(5,2)*w2(2,1)*w3(0,0) - t2*w1(1,0)*w2(2,2)*w3(5,0) + t2*w1(2,2)*w2(1,0)*w3(5,0) - t2*w1(2,2)*w2(5,0)*w3(1,0) + t2*w1(5,0)*w2(2,2)*w3(1,0) + t2*w1(2,1)*w2(2,2)*w3(4,1) - t2*w1(2,2)*w2(2,1)*w3(4,1) + t2*w1(2,2)*w2(4,1)*w3(2,1) - t2*w1(4,1)*w2(2,2)*w3(2,1) + t2*w1(2,0)*w2(2,1)*w3(5,0) - t2*w1(2,0)*w2(5,0)*w3(2,1) - t2*w1(2,1)*w2(2,0)*w3(5,0) + t2*w1(2,1)*w2(5,0)*w3(2,0) + t2*w1(5,0)*w2(2,0)*w3(2,1) - t2*w1(5,0)*w2(2,1)*w3(2,0) + t2*w1(2,2)*w2(5,2)*w3(2,1) - t2*w1(5,2)*w2(2,2)*w3(2,1) + w1(0,0)*w2(0,3)*w3(0,1)*y - w1(0,1)*w2(0,3)*w3(0,0)*y - w1(0,3)*w2(0,0)*w3(0,1)*y + w1(0,3)*w2(0,1)*w3(0,0)*y + w1(0,1)*w2(0,5)*w3(0,2)*y - w1(0,2)*w2(0,5)*w3(0,1)*y - w1(0,5)*w2(0,1)*w3(0,2)*y + w1(0,5)*w2(0,2)*w3(0,1)*y - w1(0,0)*w2(0,3)*w3(1,0)*y + w1(0,3)*w2(0,0)*w3(1,0)*y - w1(0,3)*w2(1,0)*w3(0,0)*y + w1(1,0)*w2(0,3)*w3(0,0)*y + w1(0,0)*w2(1,4)*w3(0,1)*y - w1(0,1)*w2(1,4)*w3(0,0)*y - w1(1,4)*w2(0,0)*w3(0,1)*y + w1(1,4)*w2(0,1)*w3(0,0)*y + w1(0,2)*w2(0,5)*w3(1,0)*y - w1(0,5)*w2(0,2)*w3(1,0)*y + w1(0,5)*w2(1,0)*w3(0,2)*y - w1(1,0)*w2(0,5)*w3(0,2)*y - w1(0,0)*w2(1,4)*w3(1,0)*y + w1(1,0)*w2(1,4)*w3(0,0)*y + w1(1,4)*w2(0,0)*w3(1,0)*y - w1(1,4)*w2(1,0)*w3(0,0)*y + w1(0,0)*w2(2,5)*w3(0,1)*y - w1(0,1)*w2(0,5)*w3(2,0)*y - w1(0,1)*w2(2,3)*w3(0,2)*y - w1(0,1)*w2(2,5)*w3(0,0)*y + w1(0,2)*w2(0,3)*w3(2,1)*y + w1(0,2)*w2(2,3)*w3(0,1)*y - w1(0,3)*w2(0,2)*w3(2,1)*y + w1(0,3)*w2(2,1)*w3(0,2)*y - w1(0,3)*w2(2,2)*w3(0,1)*y + w1(0,5)*w2(0,1)*w3(2,0)*y - w1(0,5)*w2(2,0)*w3(0,1)*y + w1(2,0)*w2(0,5)*w3(0,1)*y - w1(2,1)*w2(0,3)*w3(0,2)*y + w1(2,2)*w2(0,3)*w3(0,1)*y + w1(2,3)*w2(0,1)*w3(0,2)*y - w1(2,3)*w2(0,2)*w3(0,1)*y - w1(2,5)*w2(0,0)*w3(0,1)*y + w1(2,5)*w2(0,1)*w3(0,0)*y - w1(0,0)*w2(0,1)*w3(3,0)*y + w1(0,0)*w2(3,0)*w3(0,1)*y + w1(0,1)*w2(0,0)*w3(3,0)*y - w1(0,1)*w2(3,0)*w3(0,0)*y - w1(3,0)*w2(0,0)*w3(0,1)*y + w1(3,0)*w2(0,1)*w3(0,0)*y - w1(0,0)*w2(2,5)*w3(1,0)*y + w1(0,1)*w2(3,2)*w3(0,2)*y - w1(0,2)*w2(2,3)*w3(1,0)*y - w1(0,2)*w2(3,2)*w3(0,1)*y + w1(0,3)*w2(2,2)*w3(1,0)*y - w1(0,5)*w2(1,0)*w3(2,0)*y + w1(0,5)*w2(2,0)*w3(1,0)*y + w1(1,0)*w2(0,5)*w3(2,0)*y + w1(1,0)*w2(2,3)*w3(0,2)*y + w1(1,0)*w2(2,5)*w3(0,0)*y - w1(2,0)*w2(0,5)*w3(1,0)*y - w1(2,2)*w2(0,3)*w3(1,0)*y + w1(2,3)*w2(0,2)*w3(1,0)*y - w1(2,3)*w2(1,0)*w3(0,2)*y + w1(2,5)*w2(0,0)*w3(1,0)*y - w1(2,5)*w2(1,0)*w3(0,0)*y - w1(3,2)*w2(0,1)*w3(0,2)*y + w1(3,2)*w2(0,2)*w3(0,1)*y + w1(0,2)*w2(1,4)*w3(2,1)*y - w1(1,4)*w2(0,2)*w3(2,1)*y + w1(1,4)*w2(2,1)*w3(0,2)*y - w1(1,4)*w2(2,2)*w3(0,1)*y - w1(2,1)*w2(1,4)*w3(0,2)*y + w1(2,2)*w2(1,4)*w3(0,1)*y + w1(0,0)*w2(1,0)*w3(3,0)*y - w1(0,0)*w2(3,0)*w3(1,0)*y - w1(1,0)*w2(0,0)*w3(3,0)*y + w1(1,0)*w2(3,0)*w3(0,0)*y + w1(3,0)*w2(0,0)*w3(1,0)*y - w1(3,0)*w2(1,0)*w3(0,0)*y - w1(0,0)*w2(0,1)*w3(4,1)*y + w1(0,0)*w2(4,1)*w3(0,1)*y + w1(0,1)*w2(0,0)*w3(4,1)*y - w1(0,1)*w2(4,1)*w3(0,0)*y - w1(4,1)*w2(0,0)*w3(0,1)*y + w1(4,1)*w2(0,1)*w3(0,0)*y + w1(0,1)*w2(2,3)*w3(2,0)*y + w1(0,2)*w2(3,2)*w3(1,0)*y + w1(0,3)*w2(2,0)*w3(2,1)*y - w1(0,3)*w2(2,1)*w3(2,0)*y - w1(1,0)*w2(3,2)*w3(0,2)*y - w1(2,0)*w2(0,3)*w3(2,1)*y - w1(2,0)*w2(2,3)*w3(0,1)*y + w1(2,1)*w2(0,3)*w3(2,0)*y - w1(2,3)*w2(0,1)*w3(2,0)*y + w1(2,3)*w2(2,0)*w3(0,1)*y - w1(3,2)*w2(0,2)*w3(1,0)*y + w1(3,2)*w2(1,0)*w3(0,2)*y + w1(1,4)*w2(2,2)*w3(1,0)*y - w1(2,2)*w2(1,4)*w3(1,0)*y + w1(0,2)*w2(2,5)*w3(2,1)*y - w1(2,1)*w2(2,5)*w3(0,2)*y + w1(2,2)*w2(2,5)*w3(0,1)*y - w1(2,5)*w2(0,2)*w3(2,1)*y + w1(2,5)*w2(2,1)*w3(0,2)*y - w1(2,5)*w2(2,2)*w3(0,1)*y + w1(0,0)*w2(1,0)*w3(4,1)*y - w1(0,0)*w2(4,1)*w3(1,0)*y - w1(1,0)*w2(0,0)*w3(4,1)*y + w1(1,0)*w2(4,1)*w3(0,0)*y + w1(4,1)*w2(0,0)*w3(1,0)*y - w1(4,1)*w2(1,0)*w3(0,0)*y + w1(0,0)*w2(5,2)*w3(0,1)*y + w1(0,1)*w2(0,2)*w3(5,0)*y + w1(0,1)*w2(2,2)*w3(3,0)*y - w1(0,1)*w2(3,2)*w3(2,0)*y - w1(0,1)*w2(5,0)*w3(0,2)*y - w1(0,1)*w2(5,2)*w3(0,0)*y - w1(0,2)*w2(0,1)*w3(5,0)*y - w1(0,2)*w2(2,1)*w3(3,0)*y + w1(0,2)*w2(3,0)*w3(2,1)*y + w1(0,2)*w2(5,0)*w3(0,1)*y - w1(1,0)*w2(2,3)*w3(2,0)*y + w1(2,0)*w2(2,3)*w3(1,0)*y + w1(2,0)*w2(3,2)*w3(0,1)*y + w1(2,1)*w2(0,2)*w3(3,0)*y - w1(2,1)*w2(3,0)*w3(0,2)*y - w1(2,2)*w2(0,1)*w3(3,0)*y + w1(2,2)*w2(3,0)*w3(0,1)*y + w1(2,3)*w2(1,0)*w3(2,0)*y - w1(2,3)*w2(2,0)*w3(1,0)*y - w1(3,0)*w2(0,2)*w3(2,1)*y + w1(3,0)*w2(2,1)*w3(0,2)*y - w1(3,0)*w2(2,2)*w3(0,1)*y + w1(3,2)*w2(0,1)*w3(2,0)*y - w1(3,2)*w2(2,0)*w3(0,1)*y + w1(5,0)*w2(0,1)*w3(0,2)*y - w1(5,0)*w2(0,2)*w3(0,1)*y - w1(5,2)*w2(0,0)*w3(0,1)*y + w1(5,2)*w2(0,1)*w3(0,0)*y + w1(1,4)*w2(2,0)*w3(2,1)*y - w1(1,4)*w2(2,1)*w3(2,0)*y - w1(2,0)*w2(1,4)*w3(2,1)*y + w1(2,1)*w2(1,4)*w3(2,0)*y - w1(2,2)*w2(2,5)*w3(1,0)*y + w1(2,5)*w2(2,2)*w3(1,0)*y - w1(0,0)*w2(5,2)*w3(1,0)*y + w1(0,2)*w2(1,0)*w3(5,0)*y - w1(0,2)*w2(5,0)*w3(1,0)*y - w1(1,0)*w2(0,2)*w3(5,0)*y - w1(1,0)*w2(2,2)*w3(3,0)*y + w1(1,0)*w2(3,2)*w3(2,0)*y + w1(1,0)*w2(5,0)*w3(0,2)*y + w1(1,0)*w2(5,2)*w3(0,0)*y - w1(2,0)*w2(3,2)*w3(1,0)*y + w1(2,2)*w2(1,0)*w3(3,0)*y - w1(2,2)*w2(3,0)*w3(1,0)*y + w1(3,0)*w2(2,2)*w3(1,0)*y - w1(3,2)*w2(1,0)*w3(2,0)*y + w1(3,2)*w2(2,0)*w3(1,0)*y + w1(5,0)*w2(0,2)*w3(1,0)*y - w1(5,0)*w2(1,0)*w3(0,2)*y + w1(5,2)*w2(0,0)*w3(1,0)*y - w1(5,2)*w2(1,0)*w3(0,0)*y + w1(0,1)*w2(2,2)*w3(4,1)*y - w1(0,2)*w2(2,1)*w3(4,1)*y + w1(0,2)*w2(4,1)*w3(2,1)*y + w1(2,1)*w2(0,2)*w3(4,1)*y - w1(2,1)*w2(4,1)*w3(0,2)*y - w1(2,2)*w2(0,1)*w3(4,1)*y + w1(2,2)*w2(4,1)*w3(0,1)*y - w1(4,1)*w2(0,2)*w3(2,1)*y + w1(4,1)*w2(2,1)*w3(0,2)*y - w1(4,1)*w2(2,2)*w3(0,1)*y - w1(2,0)*w2(2,5)*w3(2,1)*y + w1(2,1)*w2(2,5)*w3(2,0)*y + w1(2,5)*w2(2,0)*w3(2,1)*y - w1(2,5)*w2(2,1)*w3(2,0)*y - w1(0,1)*w2(2,0)*w3(5,0)*y + w1(0,1)*w2(5,0)*w3(2,0)*y + w1(2,0)*w2(0,1)*w3(5,0)*y + w1(2,0)*w2(2,1)*w3(3,0)*y - w1(2,0)*w2(3,0)*w3(2,1)*y - w1(2,0)*w2(5,0)*w3(0,1)*y - w1(2,1)*w2(2,0)*w3(3,0)*y + w1(2,1)*w2(3,0)*w3(2,0)*y + w1(3,0)*w2(2,0)*w3(2,1)*y - w1(3,0)*w2(2,1)*w3(2,0)*y - w1(5,0)*w2(0,1)*w3(2,0)*y + w1(5,0)*w2(2,0)*w3(0,1)*y - w1(1,0)*w2(2,2)*w3(4,1)*y + w1(2,2)*w2(1,0)*w3(4,1)*y - w1(2,2)*w2(4,1)*w3(1,0)*y + w1(4,1)*w2(2,2)*w3(1,0)*y + w1(0,2)*w2(5,2)*w3(2,1)*y - w1(2,1)*w2(5,2)*w3(0,2)*y + w1(2,2)*w2(5,2)*w3(0,1)*y - w1(5,2)*w2(0,2)*w3(2,1)*y + w1(5,2)*w2(2,1)*w3(0,2)*y - w1(5,2)*w2(2,2)*w3(0,1)*y + w1(1,0)*w2(2,0)*w3(5,0)*y - w1(1,0)*w2(5,0)*w3(2,0)*y - w1(2,0)*w2(1,0)*w3(5,0)*y + w1(2,0)*w2(5,0)*w3(1,0)*y + w1(5,0)*w2(1,0)*w3(2,0)*y - w1(5,0)*w2(2,0)*w3(1,0)*y + w1(2,0)*w2(2,1)*w3(4,1)*y - w1(2,0)*w2(4,1)*w3(2,1)*y - w1(2,1)*w2(2,0)*w3(4,1)*y + w1(2,1)*w2(4,1)*w3(2,0)*y + w1(4,1)*w2(2,0)*w3(2,1)*y - w1(4,1)*w2(2,1)*w3(2,0)*y - w1(2,2)*w2(5,2)*w3(1,0)*y + w1(5,2)*w2(2,2)*w3(1,0)*y - w1(2,0)*w2(5,2)*w3(2,1)*y + w1(2,1)*w2(5,2)*w3(2,0)*y + w1(5,2)*w2(2,0)*w3(2,1)*y - w1(5,2)*w2(2,1)*w3(2,0)*y - t2*w1(0,0)*w2(0,5)*w3(2,1)*y + t2*w1(0,5)*w2(0,0)*w3(2,1)*y - t2*w1(0,5)*w2(2,1)*w3(0,0)*y + t2*w1(2,1)*w2(0,5)*w3(0,0)*y + t2*w1(0,0)*w2(2,3)*w3(2,1)*y - t2*w1(2,1)*w2(2,3)*w3(0,0)*y - t2*w1(2,3)*w2(0,0)*w3(2,1)*y + t2*w1(2,3)*w2(2,1)*w3(0,0)*y + t2*w1(0,5)*w2(2,2)*w3(2,1)*y - t2*w1(2,2)*w2(0,5)*w3(2,1)*y - t2*w1(0,0)*w2(3,2)*w3(2,1)*y + t2*w1(2,1)*w2(3,2)*w3(0,0)*y + t2*w1(3,2)*w2(0,0)*w3(2,1)*y - t2*w1(3,2)*w2(2,1)*w3(0,0)*y + t2*w1(2,2)*w2(2,3)*w3(2,1)*y - t2*w1(2,3)*w2(2,2)*w3(2,1)*y - t2*w1(0,0)*w2(2,1)*w3(5,0)*y + t2*w1(0,0)*w2(5,0)*w3(2,1)*y + t2*w1(2,1)*w2(0,0)*w3(5,0)*y - t2*w1(2,1)*w2(5,0)*w3(0,0)*y - t2*w1(5,0)*w2(0,0)*w3(2,1)*y + t2*w1(5,0)*w2(2,1)*w3(0,0)*y - t2*w1(2,2)*w2(3,2)*w3(2,1)*y + t2*w1(3,2)*w2(2,2)*w3(2,1)*y + t2*w1(2,1)*w2(2,2)*w3(5,0)*y - t2*w1(2,2)*w2(2,1)*w3(5,0)*y + t2*w1(2,2)*w2(5,0)*w3(2,1)*y - t2*w1(5,0)*w2(2,2)*w3(2,1)*y) + t90*t187*w3(0,3) + t90*t187*w3(1,4) + t90*t187*w3(2,5) + t90*t212*w3(0,5) - t90*t212*w3(2,3) + t90*t187*w3(5,2) + t90*t212*w3(3,2),
    t10*t90*w3(2,3) - t10*t90*w3(0,5) - t90*(w1(0,1)*w2(0,3)*w3(1,2) - w1(0,3)*w2(0,1)*w3(1,2) + w1(0,3)*w2(1,2)*w3(0,1) - w1(1,2)*w2(0,3)*w3(0,1) - w1(0,1)*w2(0,3)*w3(2,1) + w1(0,3)*w2(0,1)*w3(2,1) + w1(0,3)*w2(1,0)*w3(1,2) - w1(0,3)*w2(1,2)*w3(1,0) - w1(0,3)*w2(2,1)*w3(0,1) - w1(1,0)*w2(0,3)*w3(1,2) + w1(1,2)*w2(0,3)*w3(1,0) + w1(2,1)*w2(0,3)*w3(0,1) + w1(0,1)*w2(1,4)*w3(1,2) - w1(1,2)*w2(1,4)*w3(0,1) - w1(1,4)*w2(0,1)*w3(1,2) + w1(1,4)*w2(1,2)*w3(0,1) - w1(0,3)*w2(1,0)*w3(2,1) + w1(0,3)*w2(2,1)*w3(1,0) + w1(1,0)*w2(0,3)*w3(2,1) - w1(2,1)*w2(0,3)*w3(1,0) - w1(0,1)*w2(1,4)*w3(2,1) - w1(1,0)*w2(1,4)*w3(1,2) + w1(1,2)*w2(1,4)*w3(1,0) + w1(1,4)*w2(0,1)*w3(2,1) + w1(1,4)*w2(1,0)*w3(1,2) - w1(1,4)*w2(1,2)*w3(1,0) - w1(1,4)*w2(2,1)*w3(0,1) + w1(2,1)*w2(1,4)*w3(0,1) + w1(0,1)*w2(2,5)*w3(1,2) - w1(1,2)*w2(2,5)*w3(0,1) - w1(2,5)*w2(0,1)*w3(1,2) + w1(2,5)*w2(1,2)*w3(0,1) - w1(0,1)*w2(1,2)*w3(3,0) + w1(0,1)*w2(3,0)*w3(1,2) + w1(1,2)*w2(0,1)*w3(3,0) - w1(1,2)*w2(3,0)*w3(0,1) - w1(3,0)*w2(0,1)*w3(1,2) + w1(3,0)*w2(1,2)*w3(0,1) + w1(1,0)*w2(1,4)*w3(2,1) - w1(1,4)*w2(1,0)*w3(2,1) + w1(1,4)*w2(2,1)*w3(1,0) - w1(2,1)*w2(1,4)*w3(1,0) - w1(0,1)*w2(2,5)*w3(2,1) - w1(1,0)*w2(2,5)*w3(1,2) + w1(1,2)*w2(2,5)*w3(1,0) + w1(2,1)*w2(2,5)*w3(0,1) + w1(2,5)*w2(0,1)*w3(2,1) + w1(2,5)*w2(1,0)*w3(1,2) - w1(2,5)*w2(1,2)*w3(1,0) - w1(2,5)*w2(2,1)*w3(0,1) + w1(0,1)*w2(2,1)*w3(3,0) - w1(0,1)*w2(3,0)*w3(2,1) + w1(1,0)*w2(1,2)*w3(3,0) - w1(1,0)*w2(3,0)*w3(1,2) - w1(1,2)*w2(1,0)*w3(3,0) + w1(1,2)*w2(3,0)*w3(1,0) - w1(2,1)*w2(0,1)*w3(3,0) + w1(2,1)*w2(3,0)*w3(0,1) + w1(3,0)*w2(0,1)*w3(2,1) + w1(3,0)*w2(1,0)*w3(1,2) - w1(3,0)*w2(1,2)*w3(1,0) - w1(3,0)*w2(2,1)*w3(0,1) - w1(0,1)*w2(1,2)*w3(4,1) + w1(0,1)*w2(4,1)*w3(1,2) + w1(1,2)*w2(0,1)*w3(4,1) - w1(1,2)*w2(4,1)*w3(0,1) - w1(4,1)*w2(0,1)*w3(1,2) + w1(4,1)*w2(1,2)*w3(0,1) + w1(1,0)*w2(2,5)*w3(2,1) - w1(2,1)*w2(2,5)*w3(1,0) - w1(2,5)*w2(1,0)*w3(2,1) + w1(2,5)*w2(2,1)*w3(1,0) - w1(1,0)*w2(2,1)*w3(3,0) + w1(1,0)*w2(3,0)*w3(2,1) + w1(2,1)*w2(1,0)*w3(3,0) - w1(2,1)*w2(3,0)*w3(1,0) - w1(3,0)*w2(1,0)*w3(2,1) + w1(3,0)*w2(2,1)*w3(1,0) + w1(0,1)*w2(2,1)*w3(4,1) - w1(0,1)*w2(4,1)*w3(2,1) + w1(1,0)*w2(1,2)*w3(4,1) - w1(1,0)*w2(4,1)*w3(1,2) - w1(1,2)*w2(1,0)*w3(4,1) + w1(1,2)*w2(4,1)*w3(1,0) - w1(2,1)*w2(0,1)*w3(4,1) + w1(2,1)*w2(4,1)*w3(0,1) + w1(4,1)*w2(0,1)*w3(2,1) + w1(4,1)*w2(1,0)*w3(1,2) - w1(4,1)*w2(1,2)*w3(1,0) - w1(4,1)*w2(2,1)*w3(0,1) + w1(0,1)*w2(5,2)*w3(1,2) - w1(1,2)*w2(5,2)*w3(0,1) - w1(5,2)*w2(0,1)*w3(1,2) + w1(5,2)*w2(1,2)*w3(0,1) - w1(1,0)*w2(2,1)*w3(4,1) + w1(1,0)*w2(4,1)*w3(2,1) + w1(2,1)*w2(1,0)*w3(4,1) - w1(2,1)*w2(4,1)*w3(1,0) - w1(4,1)*w2(1,0)*w3(2,1) + w1(4,1)*w2(2,1)*w3(1,0) - w1(0,1)*w2(5,2)*w3(2,1) - w1(1,0)*w2(5,2)*w3(1,2) + w1(1,2)*w2(5,2)*w3(1,0) + w1(2,1)*w2(5,2)*w3(0,1) + w1(5,2)*w2(0,1)*w3(2,1) + w1(5,2)*w2(1,0)*w3(1,2) - w1(5,2)*w2(1,2)*w3(1,0) - w1(5,2)*w2(2,1)*w3(0,1) + w1(1,0)*w2(5,2)*w3(2,1) - w1(2,1)*w2(5,2)*w3(1,0) - w1(5,2)*w2(1,0)*w3(2,1) + w1(5,2)*w2(2,1)*w3(1,0) - t2*w1(0,1)*w2(0,5)*w3(1,0) + t2*w1(0,5)*w2(0,1)*w3(1,0) - t2*w1(0,5)*w2(1,0)*w3(0,1) + t2*w1(1,0)*w2(0,5)*w3(0,1) - t2*w1(0,1)*w2(0,3)*w3(2,1) + t2*w1(0,3)*w2(0,1)*w3(2,1) - t2*w1(0,3)*w2(2,1)*w3(0,1) + t2*w1(2,1)*w2(0,3)*w3(0,1) + t2*w1(0,1)*w2(2,3)*w3(1,0) - t2*w1(1,0)*w2(2,3)*w3(0,1) - t2*w1(2,3)*w2(0,1)*w3(1,0) + t2*w1(2,3)*w2(1,0)*w3(0,1) - t2*w1(0,1)*w2(1,4)*w3(2,1) + t2*w1(1,4)*w2(0,1)*w3(2,1) - t2*w1(1,4)*w2(2,1)*w3(0,1) + t2*w1(2,1)*w2(1,4)*w3(0,1) - t2*w1(0,5)*w2(1,2)*w3(2,1) + t2*w1(0,5)*w2(2,1)*w3(1,2) + t2*w1(1,2)*w2(0,5)*w3(2,1) - t2*w1(2,1)*w2(0,5)*w3(1,2) - t2*w1(0,1)*w2(3,2)*w3(1,0) + t2*w1(1,0)*w2(3,2)*w3(0,1) + t2*w1(3,2)*w2(0,1)*w3(1,0) - t2*w1(3,2)*w2(1,0)*w3(0,1) - t2*w1(0,1)*w2(2,5)*w3(2,1) + t2*w1(2,1)*w2(2,5)*w3(0,1) + t2*w1(2,5)*w2(0,1)*w3(2,1) - t2*w1(2,5)*w2(2,1)*w3(0,1) + t2*w1(0,1)*w2(2,1)*w3(3,0) - t2*w1(0,1)*w2(3,0)*w3(2,1) - t2*w1(2,1)*w2(0,1)*w3(3,0) + t2*w1(2,1)*w2(3,0)*w3(0,1) + t2*w1(3,0)*w2(0,1)*w3(2,1) - t2*w1(3,0)*w2(2,1)*w3(0,1) - t2*w1(1,2)*w2(2,3)*w3(2,1) + t2*w1(2,1)*w2(2,3)*w3(1,2) + t2*w1(2,3)*w2(1,2)*w3(2,1) - t2*w1(2,3)*w2(2,1)*w3(1,2) - t2*w1(0,1)*w2(1,0)*w3(5,0) + t2*w1(0,1)*w2(5,0)*w3(1,0) + t2*w1(1,0)*w2(0,1)*w3(5,0) - t2*w1(1,0)*w2(5,0)*w3(0,1) - t2*w1(5,0)*w2(0,1)*w3(1,0) + t2*w1(5,0)*w2(1,0)*w3(0,1) + t2*w1(0,1)*w2(2,1)*w3(4,1) - t2*w1(0,1)*w2(4,1)*w3(2,1) - t2*w1(2,1)*w2(0,1)*w3(4,1) + t2*w1(2,1)*w2(4,1)*w3(0,1) + t2*w1(4,1)*w2(0,1)*w3(2,1) - t2*w1(4,1)*w2(2,1)*w3(0,1) + t2*w1(1,2)*w2(3,2)*w3(2,1) - t2*w1(2,1)*w2(3,2)*w3(1,2) - t2*w1(3,2)*w2(1,2)*w3(2,1) + t2*w1(3,2)*w2(2,1)*w3(1,2) - t2*w1(0,1)*w2(5,2)*w3(2,1) + t2*w1(2,1)*w2(5,2)*w3(0,1) + t2*w1(5,2)*w2(0,1)*w3(2,1) - t2*w1(5,2)*w2(2,1)*w3(0,1) + t2*w1(1,2)*w2(2,1)*w3(5,0) - t2*w1(1,2)*w2(5,0)*w3(2,1) - t2*w1(2,1)*w2(1,2)*w3(5,0) + t2*w1(2,1)*w2(5,0)*w3(1,2) + t2*w1(5,0)*w2(1,2)*w3(2,1) - t2*w1(5,0)*w2(2,1)*w3(1,2) + w1(0,1)*w2(0,3)*w3(1,0)*y - w1(0,3)*w2(0,1)*w3(1,0)*y + w1(0,3)*w2(1,0)*w3(0,1)*y - w1(1,0)*w2(0,3)*w3(0,1)*y - w1(0,1)*w2(0,5)*w3(1,2)*y + w1(0,5)*w2(0,1)*w3(1,2)*y - w1(0,5)*w2(1,2)*w3(0,1)*y + w1(1,2)*w2(0,5)*w3(0,1)*y + w1(0,1)*w2(1,4)*w3(1,0)*y - w1(1,0)*w2(1,4)*w3(0,1)*y - w1(1,4)*w2(0,1)*w3(1,0)*y + w1(1,4)*w2(1,0)*w3(0,1)*y + w1(0,1)*w2(0,5)*w3(2,1)*y - w1(0,5)*w2(0,1)*w3(2,1)*y - w1(0,5)*w2(1,0)*w3(1,2)*y + w1(0,5)*w2(1,2)*w3(1,0)*y + w1(0,5)*w2(2,1)*w3(0,1)*y + w1(1,0)*w2(0,5)*w3(1,2)*y - w1(1,2)*w2(0,5)*w3(1,0)*y - w1(2,1)*w2(0,5)*w3(0,1)*y + w1(0,1)*w2(2,3)*w3(1,2)*y + w1(0,1)*w2(2,5)*w3(1,0)*y + w1(0,3)*w2(1,2)*w3(2,1)*y - w1(0,3)*w2(2,1)*w3(1,2)*y + w1(0,5)*w2(1,0)*w3(2,1)*y - w1(0,5)*w2(2,1)*w3(1,0)*y - w1(1,0)*w2(0,5)*w3(2,1)*y - w1(1,0)*w2(2,5)*w3(0,1)*y - w1(1,2)*w2(0,3)*w3(2,1)*y - w1(1,2)*w2(2,3)*w3(0,1)*y + w1(2,1)*w2(0,3)*w3(1,2)*y + w1(2,1)*w2(0,5)*w3(1,0)*y - w1(2,3)*w2(0,1)*w3(1,2)*y + w1(2,3)*w2(1,2)*w3(0,1)*y - w1(2,5)*w2(0,1)*w3(1,0)*y + w1(2,5)*w2(1,0)*w3(0,1)*y - w1(0,1)*w2(1,0)*w3(3,0)*y + w1(0,1)*w2(3,0)*w3(1,0)*y + w1(1,0)*w2(0,1)*w3(3,0)*y - w1(1,0)*w2(3,0)*w3(0,1)*y - w1(3,0)*w2(0,1)*w3(1,0)*y + w1(3,0)*w2(1,0)*w3(0,1)*y - w1(0,1)*w2(2,3)*w3(2,1)*y - w1(0,1)*w2(3,2)*w3(1,2)*y - w1(1,0)*w2(2,3)*w3(1,2)*y + w1(1,2)*w2(2,3)*w3(1,0)*y + w1(1,2)*w2(3,2)*w3(0,1)*y + w1(2,1)*w2(2,3)*w3(0,1)*y + w1(2,3)*w2(0,1)*w3(2,1)*y + w1(2,3)*w2(1,0)*w3(1,2)*y - w1(2,3)*w2(1,2)*w3(1,0)*y - w1(2,3)*w2(2,1)*w3(0,1)*y + w1(3,2)*w2(0,1)*w3(1,2)*y - w1(3,2)*w2(1,2)*w3(0,1)*y - w1(1,2)*w2(1,4)*w3(2,1)*y + w1(1,4)*w2(1,2)*w3(2,1)*y - w1(1,4)*w2(2,1)*w3(1,2)*y + w1(2,1)*w2(1,4)*w3(1,2)*y - w1(0,1)*w2(1,0)*w3(4,1)*y + w1(0,1)*w2(4,1)*w3(1,0)*y + w1(1,0)*w2(0,1)*w3(4,1)*y - w1(1,0)*w2(4,1)*w3(0,1)*y - w1(4,1)*w2(0,1)*w3(1,0)*y + w1(4,1)*w2(1,0)*w3(0,1)*y + w1(0,1)*w2(3,2)*w3(2,1)*y + w1(1,0)*w2(2,3)*w3(2,1)*y + w1(1,0)*w2(3,2)*w3(1,2)*y - w1(1,2)*w2(3,2)*w3(1,0)*y - w1(2,1)*w2(2,3)*w3(1,0)*y - w1(2,1)*w2(3,2)*w3(0,1)*y - w1(2,3)*w2(1,0)*w3(2,1)*y + w1(2,3)*w2(2,1)*w3(1,0)*y - w1(3,2)*w2(0,1)*w3(2,1)*y - w1(3,2)*w2(1,0)*w3(1,2)*y + w1(3,2)*w2(1,2)*w3(1,0)*y + w1(3,2)*w2(2,1)*w3(0,1)*y - w1(1,2)*w2(2,5)*w3(2,1)*y + w1(2,1)*w2(2,5)*w3(1,2)*y + w1(2,5)*w2(1,2)*w3(2,1)*y - w1(2,5)*w2(2,1)*w3(1,2)*y - w1(0,1)*w2(1,2)*w3(5,0)*y + w1(0,1)*w2(5,0)*w3(1,2)*y + w1(0,1)*w2(5,2)*w3(1,0)*y - w1(1,0)*w2(3,2)*w3(2,1)*y - w1(1,0)*w2(5,2)*w3(0,1)*y + w1(1,2)*w2(0,1)*w3(5,0)*y + w1(1,2)*w2(2,1)*w3(3,0)*y - w1(1,2)*w2(3,0)*w3(2,1)*y - w1(1,2)*w2(5,0)*w3(0,1)*y - w1(2,1)*w2(1,2)*w3(3,0)*y + w1(2,1)*w2(3,0)*w3(1,2)*y + w1(2,1)*w2(3,2)*w3(1,0)*y + w1(3,0)*w2(1,2)*w3(2,1)*y - w1(3,0)*w2(2,1)*w3(1,2)*y + w1(3,2)*w2(1,0)*w3(2,1)*y - w1(3,2)*w2(2,1)*w3(1,0)*y - w1(5,0)*w2(0,1)*w3(1,2)*y + w1(5,0)*w2(1,2)*w3(0,1)*y - w1(5,2)*w2(0,1)*w3(1,0)*y + w1(5,2)*w2(1,0)*w3(0,1)*y + w1(0,1)*w2(2,1)*w3(5,0)*y - w1(0,1)*w2(5,0)*w3(2,1)*y + w1(1,0)*w2(1,2)*w3(5,0)*y - w1(1,0)*w2(5,0)*w3(1,2)*y - w1(1,2)*w2(1,0)*w3(5,0)*y + w1(1,2)*w2(5,0)*w3(1,0)*y - w1(2,1)*w2(0,1)*w3(5,0)*y + w1(2,1)*w2(5,0)*w3(0,1)*y + w1(5,0)*w2(0,1)*w3(2,1)*y + w1(5,0)*w2(1,0)*w3(1,2)*y - w1(5,0)*w2(1,2)*w3(1,0)*y - w1(5,0)*w2(2,1)*w3(0,1)*y + w1(1,2)*w2(2,1)*w3(4,1)*y - w1(1,2)*w2(4,1)*w3(2,1)*y - w1(2,1)*w2(1,2)*w3(4,1)*y + w1(2,1)*w2(4,1)*w3(1,2)*y + w1(4,1)*w2(1,2)*w3(2,1)*y - w1(4,1)*w2(2,1)*w3(1,2)*y - w1(1,0)*w2(2,1)*w3(5,0)*y + w1(1,0)*w2(5,0)*w3(2,1)*y + w1(2,1)*w2(1,0)*w3(5,0)*y - w1(2,1)*w2(5,0)*w3(1,0)*y - w1(5,0)*w2(1,0)*w3(2,1)*y + w1(5,0)*w2(2,1)*w3(1,0)*y - w1(1,2)*w2(5,2)*w3(2,1)*y + w1(2,1)*w2(5,2)*w3(1,2)*y + w1(5,2)*w2(1,2)*w3(2,1)*y - w1(5,2)*w2(2,1)*w3(1,2)*y + t2*w1(0,1)*w2(0,5)*w3(2,1)*y - t2*w1(0,5)*w2(0,1)*w3(2,1)*y + t2*w1(0,5)*w2(2,1)*w3(0,1)*y - t2*w1(2,1)*w2(0,5)*w3(0,1)*y - t2*w1(0,1)*w2(2,3)*w3(2,1)*y + t2*w1(2,1)*w2(2,3)*w3(0,1)*y + t2*w1(2,3)*w2(0,1)*w3(2,1)*y - t2*w1(2,3)*w2(2,1)*w3(0,1)*y + t2*w1(0,1)*w2(3,2)*w3(2,1)*y - t2*w1(2,1)*w2(3,2)*w3(0,1)*y - t2*w1(3,2)*w2(0,1)*w3(2,1)*y + t2*w1(3,2)*w2(2,1)*w3(0,1)*y + t2*w1(0,1)*w2(2,1)*w3(5,0)*y - t2*w1(0,1)*w2(5,0)*w3(2,1)*y - t2*w1(2,1)*w2(0,1)*w3(5,0)*y + t2*w1(2,1)*w2(5,0)*w3(0,1)*y + t2*w1(5,0)*w2(0,1)*w3(2,1)*y - t2*w1(5,0)*w2(2,1)*w3(0,1)*y) - t10*t90*w3(3,2) + t90*t232*w3(0,3) + t90*t232*w3(1,4) + t90*t232*w3(2,5) + t90*t232*w3(5,2),
    t90*(w3(2,2)*(t2*w1(0,1)*w2(0,3) - t2*w1(0,3)*w2(0,1) + t2*w1(0,1)*w2(1,4) - t2*w1(1,4)*w2(0,1) + t2*w1(0,5)*w2(1,2) - t2*w1(1,2)*w2(0,5) + t2*w1(0,1)*w2(2,5) - t2*w1(0,5)*w2(2,1) + t2*w1(2,1)*w2(0,5) - t2*w1(2,5)*w2(0,1) + t2*w1(0,1)*w2(3,0) - t2*w1(3,0)*w2(0,1) + t2*w1(1,2)*w2(2,3) - t2*w1(2,3)*w2(1,2) + t2*w1(0,1)*w2(4,1) - t2*w1(4,1)*w2(0,1) - t2*w1(1,2)*w2(3,2) - t2*w1(2,1)*w2(2,3) + t2*w1(2,3)*w2(2,1) + t2*w1(3,2)*w2(1,2) + t2*w1(0,1)*w2(5,2) + t2*w1(2,1)*w2(3,2) - t2*w1(3,2)*w2(2,1) - t2*w1(5,2)*w2(0,1) + t2*w1(1,2)*w2(5,0) - t2*w1(5,0)*w2(1,2) - t2*w1(2,1)*w2(5,0) + t2*w1(5,0)*w2(2,1) - w1(0,3)*w2(1,2)*y + w1(1,2)*w2(0,3)*y + w1(0,3)*w2(2,1)*y - w1(2,1)*w2(0,3)*y + w1(1,2)*w2(1,4)*y - w1(1,4)*w2(1,2)*y + w1(1,4)*w2(2,1)*y - w1(2,1)*w2(1,4)*y + w1(1,2)*w2(2,5)*y - w1(2,5)*w2(1,2)*y + w1(1,2)*w2(3,0)*y - w1(3,0)*w2(1,2)*y - w1(2,1)*w2(2,5)*y + w1(2,5)*w2(2,1)*y - w1(2,1)*w2(3,0)*y + w1(3,0)*w2(2,1)*y + w1(1,2)*w2(4,1)*y - w1(4,1)*w2(1,2)*y - w1(2,1)*w2(4,1)*y + w1(4,1)*w2(2,1)*y + w1(1,2)*w2(5,2)*y - w1(5,2)*w2(1,2)*y - w1(2,1)*w2(5,2)*y + w1(5,2)*w2(2,1)*y - t2*w1(0,1)*w2(0,5)*y + t2*w1(0,5)*w2(0,1)*y + t2*w1(0,1)*w2(2,3)*y - t2*w1(2,3)*w2(0,1)*y - t2*w1(0,1)*w2(3,2)*y + t2*w1(3,2)*w2(0,1)*y + t2*w1(0,1)*w2(5,0)*y - t2*w1(5,0)*w2(0,1)*y) - w1(0,2)*w2(0,3)*w3(1,2) + w1(0,3)*w2(0,2)*w3(1,2) - w1(0,3)*w2(1,2)*w3(0,2) + w1(1,2)*w2(0,3)*w3(0,2) + w1(0,2)*w2(0,3)*w3(2,1) - w1(0,3)*w2(0,2)*w3(2,1) + w1(0,3)*w2(2,1)*w3(0,2) - w1(2,1)*w2(0,3)*w3(0,2) - w1(0,2)*w2(1,4)*w3(1,2) + w1(1,2)*w2(1,4)*w3(0,2) + w1(1,4)*w2(0,2)*w3(1,2) - w1(1,4)*w2(1,2)*w3(0,2) + w1(0,3)*w2(1,2)*w3(2,0) - w1(0,3)*w2(2,0)*w3(1,2) - w1(1,2)*w2(0,3)*w3(2,0) + w1(2,0)*w2(0,3)*w3(1,2) + w1(0,2)*w2(1,4)*w3(2,1) - w1(1,4)*w2(0,2)*w3(2,1) + w1(1,4)*w2(2,1)*w3(0,2) - w1(2,1)*w2(1,4)*w3(0,2) - w1(0,2)*w2(2,5)*w3(1,2) + w1(1,2)*w2(2,5)*w3(0,2) + w1(2,5)*w2(0,2)*w3(1,2) - w1(2,5)*w2(1,2)*w3(0,2) + w1(0,2)*w2(1,2)*w3(3,0) - w1(0,2)*w2(3,0)*w3(1,2) + w1(0,3)*w2(2,0)*w3(2,1) - w1(0,3)*w2(2,1)*w3(2,0) - w1(1,2)*w2(0,2)*w3(3,0) + w1(1,2)*w2(3,0)*w3(0,2) - w1(2,0)*w2(0,3)*w3(2,1) + w1(2,1)*w2(0,3)*w3(2,0) + w1(3,0)*w2(0,2)*w3(1,2) - w1(3,0)*w2(1,2)*w3(0,2) - w1(1,2)*w2(1,4)*w3(2,0) + w1(1,4)*w2(1,2)*w3(2,0) - w1(1,4)*w2(2,0)*w3(1,2) + w1(2,0)*w2(1,4)*w3(1,2) + w1(0,2)*w2(2,5)*w3(2,1) - w1(2,1)*w2(2,5)*w3(0,2) - w1(2,5)*w2(0,2)*w3(2,1) + w1(2,5)*w2(2,1)*w3(0,2) - w1(0,2)*w2(2,1)*w3(3,0) + w1(0,2)*w2(3,0)*w3(2,1) + w1(2,1)*w2(0,2)*w3(3,0) - w1(2,1)*w2(3,0)*w3(0,2) - w1(3,0)*w2(0,2)*w3(2,1) + w1(3,0)*w2(2,1)*w3(0,2) + w1(0,2)*w2(1,2)*w3(4,1) - w1(0,2)*w2(4,1)*w3(1,2) - w1(1,2)*w2(0,2)*w3(4,1) + w1(1,2)*w2(4,1)*w3(0,2) + w1(1,4)*w2(2,0)*w3(2,1) - w1(1,4)*w2(2,1)*w3(2,0) - w1(2,0)*w2(1,4)*w3(2,1) + w1(2,1)*w2(1,4)*w3(2,0) + w1(4,1)*w2(0,2)*w3(1,2) - w1(4,1)*w2(1,2)*w3(0,2) - w1(1,2)*w2(2,5)*w3(2,0) + w1(2,0)*w2(2,5)*w3(1,2) + w1(2,5)*w2(1,2)*w3(2,0) - w1(2,5)*w2(2,0)*w3(1,2) + w1(1,2)*w2(2,0)*w3(3,0) - w1(1,2)*w2(3,0)*w3(2,0) - w1(2,0)*w2(1,2)*w3(3,0) + w1(2,0)*w2(3,0)*w3(1,2) + w1(3,0)*w2(1,2)*w3(2,0) - w1(3,0)*w2(2,0)*w3(1,2) - w1(0,2)*w2(2,1)*w3(4,1) + w1(0,2)*w2(4,1)*w3(2,1) + w1(2,1)*w2(0,2)*w3(4,1) - w1(2,1)*w2(4,1)*w3(0,2) - w1(4,1)*w2(0,2)*w3(2,1) + w1(4,1)*w2(2,1)*w3(0,2) - w1(0,2)*w2(5,2)*w3(1,2) + w1(1,2)*w2(5,2)*w3(0,2) - w1(2,0)*w2(2,5)*w3(2,1) + w1(2,1)*w2(2,5)*w3(2,0) + w1(2,5)*w2(2,0)*w3(2,1) - w1(2,5)*w2(2,1)*w3(2,0) + w1(5,2)*w2(0,2)*w3(1,2) - w1(5,2)*w2(1,2)*w3(0,2) + w1(2,0)*w2(2,1)*w3(3,0) - w1(2,0)*w2(3,0)*w3(2,1) - w1(2,1)*w2(2,0)*w3(3,0) + w1(2,1)*w2(3,0)*w3(2,0) + w1(3,0)*w2(2,0)*w3(2,1) - w1(3,0)*w2(2,1)*w3(2,0) + w1(1,2)*w2(2,0)*w3(4,1) - w1(1,2)*w2(4,1)*w3(2,0) - w1(2,0)*w2(1,2)*w3(4,1) + w1(2,0)*w2(4,1)*w3(1,2) + w1(4,1)*w2(1,2)*w3(2,0) - w1(4,1)*w2(2,0)*w3(1,2) + w1(0,2)*w2(5,2)*w3(2,1) - w1(2,1)*w2(5,2)*w3(0,2) - w1(5,2)*w2(0,2)*w3(2,1) + w1(5,2)*w2(2,1)*w3(0,2) + w1(2,0)*w2(2,1)*w3(4,1) - w1(2,0)*w2(4,1)*w3(2,1) - w1(2,1)*w2(2,0)*w3(4,1) + w1(2,1)*w2(4,1)*w3(2,0) + w1(4,1)*w2(2,0)*w3(2,1) - w1(4,1)*w2(2,1)*w3(2,0) - w1(1,2)*w2(5,2)*w3(2,0) + w1(2,0)*w2(5,2)*w3(1,2) + w1(5,2)*w2(1,2)*w3(2,0) - w1(5,2)*w2(2,0)*w3(1,2) - w1(2,0)*w2(5,2)*w3(2,1) + w1(2,1)*w2(5,2)*w3(2,0) + w1(5,2)*w2(2,0)*w3(2,1) - w1(5,2)*w2(2,1)*w3(2,0) - t2*w1(0,0)*w2(0,3)*w3(0,1) + t2*w1(0,1)*w2(0,3)*w3(0,0) + t2*w1(0,3)*w2(0,0)*w3(0,1) - t2*w1(0,3)*w2(0,1)*w3(0,0) - t2*w1(0,1)*w2(0,5)*w3(0,2) + t2*w1(0,2)*w2(0,5)*w3(0,1) + t2*w1(0,5)*w2(0,1)*w3(0,2) - t2*w1(0,5)*w2(0,2)*w3(0,1) - t2*w1(0,0)*w2(1,4)*w3(0,1) + t2*w1(0,1)*w2(1,4)*w3(0,0) + t2*w1(1,4)*w2(0,0)*w3(0,1) - t2*w1(1,4)*w2(0,1)*w3(0,0) + t2*w1(0,0)*w2(0,5)*w3(1,2) - t2*w1(0,5)*w2(0,0)*w3(1,2) + t2*w1(0,5)*w2(1,2)*w3(0,0) - t2*w1(1,2)*w2(0,5)*w3(0,0) - t2*w1(0,0)*w2(0,5)*w3(2,1) - t2*w1(0,0)*w2(2,5)*w3(0,1) + t2*w1(0,1)*w2(0,5)*w3(2,0) + t2*w1(0,1)*w2(2,3)*w3(0,2) + t2*w1(0,1)*w2(2,5)*w3(0,0) - t2*w1(0,2)*w2(2,3)*w3(0,1) + t2*w1(0,3)*w2(2,2)*w3(0,1) + t2*w1(0,5)*w2(0,0)*w3(2,1) - t2*w1(0,5)*w2(0,1)*w3(2,0) + t2*w1(0,5)*w2(2,0)*w3(0,1) - t2*w1(0,5)*w2(2,1)*w3(0,0) - t2*w1(2,0)*w2(0,5)*w3(0,1) + t2*w1(2,1)*w2(0,5)*w3(0,0) - t2*w1(2,2)*w2(0,3)*w3(0,1) - t2*w1(2,3)*w2(0,1)*w3(0,2) + t2*w1(2,3)*w2(0,2)*w3(0,1) + t2*w1(2,5)*w2(0,0)*w3(0,1) - t2*w1(2,5)*w2(0,1)*w3(0,0) + t2*w1(0,0)*w2(0,1)*w3(3,0) - t2*w1(0,0)*w2(3,0)*w3(0,1) - t2*w1(0,1)*w2(0,0)*w3(3,0) + t2*w1(0,1)*w2(3,0)*w3(0,0) + t2*w1(3,0)*w2(0,0)*w3(0,1) - t2*w1(3,0)*w2(0,1)*w3(0,0) - t2*w1(0,0)*w2(2,3)*w3(1,2) - t2*w1(0,1)*w2(3,2)*w3(0,2) + t2*w1(0,2)*w2(3,2)*w3(0,1) + t2*w1(1,2)*w2(2,3)*w3(0,0) + t2*w1(2,3)*w2(0,0)*w3(1,2) - t2*w1(2,3)*w2(1,2)*w3(0,0) + t2*w1(3,2)*w2(0,1)*w3(0,2) - t2*w1(3,2)*w2(0,2)*w3(0,1) + t2*w1(1,4)*w2(2,2)*w3(0,1) - t2*w1(2,2)*w2(1,4)*w3(0,1) - t2*w1(0,5)*w2(2,2)*w3(1,2) + t2*w1(2,2)*w2(0,5)*w3(1,2) + t2*w1(0,0)*w2(0,1)*w3(4,1) - t2*w1(0,0)*w2(4,1)*w3(0,1) - t2*w1(0,1)*w2(0,0)*w3(4,1) + t2*w1(0,1)*w2(4,1)*w3(0,0) + t2*w1(4,1)*w2(0,0)*w3(0,1) - t2*w1(4,1)*w2(0,1)*w3(0,0) + t2*w1(0,0)*w2(2,3)*w3(2,1) + t2*w1(0,0)*w2(3,2)*w3(1,2) - t2*w1(0,1)*w2(2,3)*w3(2,0) - t2*w1(1,2)*w2(3,2)*w3(0,0) + t2*w1(2,0)*w2(2,3)*w3(0,1) - t2*w1(2,1)*w2(2,3)*w3(0,0) - t2*w1(2,3)*w2(0,0)*w3(2,1) + t2*w1(2,3)*w2(0,1)*w3(2,0) - t2*w1(2,3)*w2(2,0)*w3(0,1) + t2*w1(2,3)*w2(2,1)*w3(0,0) - t2*w1(3,2)*w2(0,0)*w3(1,2) + t2*w1(3,2)*w2(1,2)*w3(0,0) + t2*w1(0,5)*w2(2,2)*w3(2,1) - t2*w1(2,2)*w2(0,5)*w3(2,1) - t2*w1(2,2)*w2(2,5)*w3(0,1) + t2*w1(2,5)*w2(2,2)*w3(0,1) - t2*w1(0,0)*w2(3,2)*w3(2,1) - t2*w1(0,0)*w2(5,2)*w3(0,1) - t2*w1(0,1)*w2(0,2)*w3(5,0) - t2*w1(0,1)*w2(2,2)*w3(3,0) + t2*w1(0,1)*w2(3,2)*w3(2,0) + t2*w1(0,1)*w2(5,0)*w3(0,2) + t2*w1(0,1)*w2(5,2)*w3(0,0) + t2*w1(0,2)*w2(0,1)*w3(5,0) - t2*w1(0,2)*w2(5,0)*w3(0,1) - t2*w1(2,0)*w2(3,2)*w3(0,1) + t2*w1(2,1)*w2(3,2)*w3(0,0) + t2*w1(2,2)*w2(0,1)*w3(3,0) - t2*w1(2,2)*w2(3,0)*w3(0,1) + t2*w1(3,0)*w2(2,2)*w3(0,1) + t2*w1(3,2)*w2(0,0)*w3(2,1) - t2*w1(3,2)*w2(0,1)*w3(2,0) + t2*w1(3,2)*w2(2,0)*w3(0,1) - t2*w1(3,2)*w2(2,1)*w3(0,0) - t2*w1(5,0)*w2(0,1)*w3(0,2) + t2*w1(5,0)*w2(0,2)*w3(0,1) + t2*w1(5,2)*w2(0,0)*w3(0,1) - t2*w1(5,2)*w2(0,1)*w3(0,0) - t2*w1(2,2)*w2(2,3)*w3(1,2) + t2*w1(2,3)*w2(2,2)*w3(1,2) + t2*w1(0,0)*w2(1,2)*w3(5,0) - t2*w1(0,0)*w2(5,0)*w3(1,2) - t2*w1(1,2)*w2(0,0)*w3(5,0) + t2*w1(1,2)*w2(5,0)*w3(0,0) + t2*w1(5,0)*w2(0,0)*w3(1,2) - t2*w1(5,0)*w2(1,2)*w3(0,0) - t2*w1(0,1)*w2(2,2)*w3(4,1) + t2*w1(2,2)*w2(0,1)*w3(4,1) - t2*w1(2,2)*w2(4,1)*w3(0,1) + t2*w1(4,1)*w2(2,2)*w3(0,1) + t2*w1(2,2)*w2(2,3)*w3(2,1) + t2*w1(2,2)*w2(3,2)*w3(1,2) - t2*w1(2,3)*w2(2,2)*w3(2,1) - t2*w1(3,2)*w2(2,2)*w3(1,2) - t2*w1(0,0)*w2(2,1)*w3(5,0) + t2*w1(0,0)*w2(5,0)*w3(2,1) + t2*w1(0,1)*w2(2,0)*w3(5,0) - t2*w1(0,1)*w2(5,0)*w3(2,0) - t2*w1(2,0)*w2(0,1)*w3(5,0) + t2*w1(2,0)*w2(5,0)*w3(0,1) + t2*w1(2,1)*w2(0,0)*w3(5,0) - t2*w1(2,1)*w2(5,0)*w3(0,0) - t2*w1(5,0)*w2(0,0)*w3(2,1) + t2*w1(5,0)*w2(0,1)*w3(2,0) - t2*w1(5,0)*w2(2,0)*w3(0,1) + t2*w1(5,0)*w2(2,1)*w3(0,0) - t2*w1(2,2)*w2(3,2)*w3(2,1) - t2*w1(2,2)*w2(5,2)*w3(0,1) + t2*w1(3,2)*w2(2,2)*w3(2,1) + t2*w1(5,2)*w2(2,2)*w3(0,1) - t2*w1(1,2)*w2(2,2)*w3(5,0) + t2*w1(2,2)*w2(1,2)*w3(5,0) - t2*w1(2,2)*w2(5,0)*w3(1,2) + t2*w1(5,0)*w2(2,2)*w3(1,2) + t2*w1(2,1)*w2(2,2)*w3(5,0) - t2*w1(2,2)*w2(2,1)*w3(5,0) + t2*w1(2,2)*w2(5,0)*w3(2,1) - t2*w1(5,0)*w2(2,2)*w3(2,1) + w1(0,1)*w2(0,3)*w3(0,2)*y - w1(0,2)*w2(0,3)*w3(0,1)*y - w1(0,3)*w2(0,1)*w3(0,2)*y + w1(0,3)*w2(0,2)*w3(0,1)*y - w1(0,0)*w2(0,3)*w3(1,2)*y + w1(0,3)*w2(0,0)*w3(1,2)*y - w1(0,3)*w2(1,2)*w3(0,0)*y + w1(1,2)*w2(0,3)*w3(0,0)*y + w1(0,1)*w2(1,4)*w3(0,2)*y - w1(0,2)*w2(1,4)*w3(0,1)*y - w1(1,4)*w2(0,1)*w3(0,2)*y + w1(1,4)*w2(0,2)*w3(0,1)*y + w1(0,2)*w2(0,5)*w3(1,2)*y - w1(0,5)*w2(0,2)*w3(1,2)*y + w1(0,5)*w2(1,2)*w3(0,2)*y - w1(1,2)*w2(0,5)*w3(0,2)*y + w1(0,0)*w2(0,3)*w3(2,1)*y - w1(0,1)*w2(0,3)*w3(2,0)*y - w1(0,3)*w2(0,0)*w3(2,1)*y + w1(0,3)*w2(0,1)*w3(2,0)*y - w1(0,3)*w2(2,0)*w3(0,1)*y + w1(0,3)*w2(2,1)*w3(0,0)*y + w1(2,0)*w2(0,3)*w3(0,1)*y - w1(2,1)*w2(0,3)*w3(0,0)*y - w1(0,0)*w2(1,4)*w3(1,2)*y + w1(1,2)*w2(1,4)*w3(0,0)*y + w1(1,4)*w2(0,0)*w3(1,2)*y - w1(1,4)*w2(1,2)*w3(0,0)*y + w1(0,1)*w2(2,5)*w3(0,2)*y - w1(0,2)*w2(0,5)*w3(2,1)*y - w1(0,2)*w2(2,5)*w3(0,1)*y + w1(0,5)*w2(0,2)*w3(2,1)*y - w1(0,5)*w2(2,1)*w3(0,2)*y + w1(2,1)*w2(0,5)*w3(0,2)*y - w1(2,5)*w2(0,1)*w3(0,2)*y + w1(2,5)*w2(0,2)*w3(0,1)*y - w1(0,1)*w2(0,2)*w3(3,0)*y + w1(0,1)*w2(3,0)*w3(0,2)*y + w1(0,2)*w2(0,1)*w3(3,0)*y - w1(0,2)*w2(3,0)*w3(0,1)*y - w1(3,0)*w2(0,1)*w3(0,2)*y + w1(3,0)*w2(0,2)*w3(0,1)*y + w1(0,0)*w2(1,4)*w3(2,1)*y - w1(0,1)*w2(1,4)*w3(2,0)*y - w1(1,4)*w2(0,0)*w3(2,1)*y + w1(1,4)*w2(0,1)*w3(2,0)*y - w1(1,4)*w2(2,0)*w3(0,1)*y + w1(1,4)*w2(2,1)*w3(0,0)*y + w1(2,0)*w2(1,4)*w3(0,1)*y - w1(2,1)*w2(1,4)*w3(0,0)*y - w1(0,0)*w2(2,5)*w3(1,2)*y - w1(0,2)*w2(2,3)*w3(1,2)*y + w1(0,3)*w2(2,2)*w3(1,2)*y - w1(0,5)*w2(1,2)*w3(2,0)*y + w1(0,5)*w2(2,0)*w3(1,2)*y + w1(1,2)*w2(0,5)*w3(2,0)*y + w1(1,2)*w2(2,3)*w3(0,2)*y + w1(1,2)*w2(2,5)*w3(0,0)*y - w1(2,0)*w2(0,5)*w3(1,2)*y - w1(2,2)*w2(0,3)*w3(1,2)*y + w1(2,3)*w2(0,2)*w3(1,2)*y - w1(2,3)*w2(1,2)*w3(0,2)*y + w1(2,5)*w2(0,0)*w3(1,2)*y - w1(2,5)*w2(1,2)*w3(0,0)*y + w1(0,0)*w2(1,2)*w3(3,0)*y - w1(0,0)*w2(3,0)*w3(1,2)*y - w1(1,2)*w2(0,0)*w3(3,0)*y + w1(1,2)*w2(3,0)*w3(0,0)*y + w1(3,0)*w2(0,0)*w3(1,2)*y - w1(3,0)*w2(1,2)*w3(0,0)*y - w1(0,1)*w2(0,2)*w3(4,1)*y + w1(0,1)*w2(4,1)*w3(0,2)*y + w1(0,2)*w2(0,1)*w3(4,1)*y - w1(0,2)*w2(4,1)*w3(0,1)*y - w1(4,1)*w2(0,1)*w3(0,2)*y + w1(4,1)*w2(0,2)*w3(0,1)*y + w1(0,0)*w2(2,5)*w3(2,1)*y - w1(0,1)*w2(2,5)*w3(2,0)*y + w1(0,2)*w2(2,3)*w3(2,1)*y + w1(0,2)*w2(3,2)*w3(1,2)*y - w1(0,3)*w2(2,2)*w3(2,1)*y - w1(0,5)*w2(2,0)*w3(2,1)*y + w1(0,5)*w2(2,1)*w3(2,0)*y - w1(1,2)*w2(3,2)*w3(0,2)*y + w1(2,0)*w2(0,5)*w3(2,1)*y + w1(2,0)*w2(2,5)*w3(0,1)*y - w1(2,1)*w2(0,5)*w3(2,0)*y - w1(2,1)*w2(2,3)*w3(0,2)*y - w1(2,1)*w2(2,5)*w3(0,0)*y + w1(2,2)*w2(0,3)*w3(2,1)*y - w1(2,3)*w2(0,2)*w3(2,1)*y + w1(2,3)*w2(2,1)*w3(0,2)*y - w1(2,5)*w2(0,0)*w3(2,1)*y + w1(2,5)*w2(0,1)*w3(2,0)*y - w1(2,5)*w2(2,0)*w3(0,1)*y + w1(2,5)*w2(2,1)*w3(0,0)*y - w1(3,2)*w2(0,2)*w3(1,2)*y + w1(3,2)*w2(1,2)*w3(0,2)*y + w1(1,4)*w2(2,2)*w3(1,2)*y - w1(2,2)*w2(1,4)*w3(1,2)*y - w1(0,0)*w2(2,1)*w3(3,0)*y + w1(0,0)*w2(3,0)*w3(2,1)*y + w1(0,1)*w2(2,0)*w3(3,0)*y - w1(0,1)*w2(3,0)*w3(2,0)*y - w1(2,0)*w2(0,1)*w3(3,0)*y + w1(2,0)*w2(3,0)*w3(0,1)*y + w1(2,1)*w2(0,0)*w3(3,0)*y - w1(2,1)*w2(3,0)*w3(0,0)*y - w1(3,0)*w2(0,0)*w3(2,1)*y + w1(3,0)*w2(0,1)*w3(2,0)*y - w1(3,0)*w2(2,0)*w3(0,1)*y + w1(3,0)*w2(2,1)*w3(0,0)*y + w1(0,0)*w2(1,2)*w3(4,1)*y - w1(0,0)*w2(4,1)*w3(1,2)*y - w1(1,2)*w2(0,0)*w3(4,1)*y + w1(1,2)*w2(4,1)*w3(0,0)*y + w1(4,1)*w2(0,0)*w3(1,2)*y - w1(4,1)*w2(1,2)*w3(0,0)*y + w1(0,1)*w2(5,2)*w3(0,2)*y - w1(0,2)*w2(3,2)*w3(2,1)*y - w1(0,2)*w2(5,2)*w3(0,1)*y - w1(1,2)*w2(2,3)*w3(2,0)*y + w1(2,0)*w2(2,3)*w3(1,2)*y + w1(2,1)*w2(3,2)*w3(0,2)*y + w1(2,3)*w2(1,2)*w3(2,0)*y - w1(2,3)*w2(2,0)*w3(1,2)*y + w1(3,2)*w2(0,2)*w3(2,1)*y - w1(3,2)*w2(2,1)*w3(0,2)*y - w1(5,2)*w2(0,1)*w3(0,2)*y + w1(5,2)*w2(0,2)*w3(0,1)*y - w1(1,4)*w2(2,2)*w3(2,1)*y + w1(2,2)*w2(1,4)*w3(2,1)*y - w1(2,2)*w2(2,5)*w3(1,2)*y + w1(2,5)*w2(2,2)*w3(1,2)*y - w1(0,0)*w2(2,1)*w3(4,1)*y + w1(0,0)*w2(4,1)*w3(2,1)*y + w1(0,1)*w2(2,0)*w3(4,1)*y - w1(0,1)*w2(4,1)*w3(2,0)*y - w1(2,0)*w2(0,1)*w3(4,1)*y + w1(2,0)*w2(4,1)*w3(0,1)*y + w1(2,1)*w2(0,0)*w3(4,1)*y - w1(2,1)*w2(4,1)*w3(0,0)*y - w1(4,1)*w2(0,0)*w3(2,1)*y + w1(4,1)*w2(0,1)*w3(2,0)*y - w1(4,1)*w2(2,0)*w3(0,1)*y + w1(4,1)*w2(2,1)*w3(0,0)*y - w1(0,0)*w2(5,2)*w3(1,2)*y + w1(0,2)*w2(1,2)*w3(5,0)*y - w1(0,2)*w2(5,0)*w3(1,2)*y - w1(1,2)*w2(0,2)*w3(5,0)*y - w1(1,2)*w2(2,2)*w3(3,0)*y + w1(1,2)*w2(3,2)*w3(2,0)*y + w1(1,2)*w2(5,0)*w3(0,2)*y + w1(1,2)*w2(5,2)*w3(0,0)*y - w1(2,0)*w2(2,3)*w3(2,1)*y - w1(2,0)*w2(3,2)*w3(1,2)*y + w1(2,1)*w2(2,3)*w3(2,0)*y + w1(2,2)*w2(1,2)*w3(3,0)*y - w1(2,2)*w2(3,0)*w3(1,2)*y + w1(2,3)*w2(2,0)*w3(2,1)*y - w1(2,3)*w2(2,1)*w3(2,0)*y + w1(3,0)*w2(2,2)*w3(1,2)*y - w1(3,2)*w2(1,2)*w3(2,0)*y + w1(3,2)*w2(2,0)*w3(1,2)*y + w1(5,0)*w2(0,2)*w3(1,2)*y - w1(5,0)*w2(1,2)*w3(0,2)*y + w1(5,2)*w2(0,0)*w3(1,2)*y - w1(5,2)*w2(1,2)*w3(0,0)*y + w1(2,2)*w2(2,5)*w3(2,1)*y - w1(2,5)*w2(2,2)*w3(2,1)*y + w1(0,0)*w2(5,2)*w3(2,1)*y - w1(0,1)*w2(5,2)*w3(2,0)*y - w1(0,2)*w2(2,1)*w3(5,0)*y + w1(0,2)*w2(5,0)*w3(2,1)*y + w1(2,0)*w2(3,2)*w3(2,1)*y + w1(2,0)*w2(5,2)*w3(0,1)*y + w1(2,1)*w2(0,2)*w3(5,0)*y + w1(2,1)*w2(2,2)*w3(3,0)*y - w1(2,1)*w2(3,2)*w3(2,0)*y - w1(2,1)*w2(5,0)*w3(0,2)*y - w1(2,1)*w2(5,2)*w3(0,0)*y - w1(2,2)*w2(2,1)*w3(3,0)*y + w1(2,2)*w2(3,0)*w3(2,1)*y - w1(3,0)*w2(2,2)*w3(2,1)*y - w1(3,2)*w2(2,0)*w3(2,1)*y + w1(3,2)*w2(2,1)*w3(2,0)*y - w1(5,0)*w2(0,2)*w3(2,1)*y + w1(5,0)*w2(2,1)*w3(0,2)*y - w1(5,2)*w2(0,0)*w3(2,1)*y + w1(5,2)*w2(0,1)*w3(2,0)*y - w1(5,2)*w2(2,0)*w3(0,1)*y + w1(5,2)*w2(2,1)*w3(0,0)*y - w1(1,2)*w2(2,2)*w3(4,1)*y + w1(2,2)*w2(1,2)*w3(4,1)*y - w1(2,2)*w2(4,1)*w3(1,2)*y + w1(4,1)*w2(2,2)*w3(1,2)*y + w1(1,2)*w2(2,0)*w3(5,0)*y - w1(1,2)*w2(5,0)*w3(2,0)*y - w1(2,0)*w2(1,2)*w3(5,0)*y + w1(2,0)*w2(5,0)*w3(1,2)*y + w1(5,0)*w2(1,2)*w3(2,0)*y - w1(5,0)*w2(2,0)*w3(1,2)*y + w1(2,1)*w2(2,2)*w3(4,1)*y - w1(2,2)*w2(2,1)*w3(4,1)*y + w1(2,2)*w2(4,1)*w3(2,1)*y - w1(4,1)*w2(2,2)*w3(2,1)*y - w1(2,2)*w2(5,2)*w3(1,2)*y + w1(5,2)*w2(2,2)*w3(1,2)*y + w1(2,0)*w2(2,1)*w3(5,0)*y - w1(2,0)*w2(5,0)*w3(2,1)*y - w1(2,1)*w2(2,0)*w3(5,0)*y + w1(2,1)*w2(5,0)*w3(2,0)*y + w1(5,0)*w2(2,0)*w3(2,1)*y - w1(5,0)*w2(2,1)*w3(2,0)*y + w1(2,2)*w2(5,2)*w3(2,1)*y - w1(5,2)*w2(2,2)*w3(2,1)*y + t2*w1(0,0)*w2(0,5)*w3(0,1)*y - t2*w1(0,1)*w2(0,5)*w3(0,0)*y - t2*w1(0,5)*w2(0,0)*w3(0,1)*y + t2*w1(0,5)*w2(0,1)*w3(0,0)*y - t2*w1(0,0)*w2(2,3)*w3(0,1)*y + t2*w1(0,1)*w2(2,3)*w3(0,0)*y + t2*w1(2,3)*w2(0,0)*w3(0,1)*y - t2*w1(2,3)*w2(0,1)*w3(0,0)*y - t2*w1(0,5)*w2(2,2)*w3(0,1)*y + t2*w1(2,2)*w2(0,5)*w3(0,1)*y + t2*w1(0,0)*w2(3,2)*w3(0,1)*y - t2*w1(0,1)*w2(3,2)*w3(0,0)*y - t2*w1(3,2)*w2(0,0)*w3(0,1)*y + t2*w1(3,2)*w2(0,1)*w3(0,0)*y - t2*w1(2,2)*w2(2,3)*w3(0,1)*y + t2*w1(2,3)*w2(2,2)*w3(0,1)*y + t2*w1(0,0)*w2(0,1)*w3(5,0)*y - t2*w1(0,0)*w2(5,0)*w3(0,1)*y - t2*w1(0,1)*w2(0,0)*w3(5,0)*y + t2*w1(0,1)*w2(5,0)*w3(0,0)*y + t2*w1(5,0)*w2(0,0)*w3(0,1)*y - t2*w1(5,0)*w2(0,1)*w3(0,0)*y + t2*w1(2,2)*w2(3,2)*w3(0,1)*y - t2*w1(3,2)*w2(2,2)*w3(0,1)*y - t2*w1(0,1)*w2(2,2)*w3(5,0)*y + t2*w1(2,2)*w2(0,1)*w3(5,0)*y - t2*w1(2,2)*w2(5,0)*w3(0,1)*y + t2*w1(5,0)*w2(2,2)*w3(0,1)*y) - t90*t248*w3(0,5) + t90*t257*w3(0,3) + t90*t248*w3(2,3) + t90*t257*w3(1,4) - t90*t248*w3(3,2) + t90*t257*w3(2,5) + t90*t257*w3(5,2);
    return t;
}


static inline Eigen::Matrix<double,1,4> get_row(
                                  const Eigen::Matrix3d &R,
                                  const Eigen::Matrix<double,6,6> &w
                                  )
{
    Eigen::Matrix<double,1,4> row;
    row << R(0,0)*w(0,3) + R(0,0)*w(3,0) + R(0,1)*w(1,3) + R(0,1)*w(4,0) + R(0,2)*w(2,3) + R(0,2)*w(5,0) + R(1,0)*w(0,4) + R(1,0)*w(3,1) + R(1,1)*w(1,4) + R(1,1)*w(4,1) + R(1,2)*w(2,4) + R(1,2)*w(5,1) + R(2,0)*w(0,5) + R(2,0)*w(3,2) + R(2,1)*w(1,5) + R(2,1)*w(4,2) + R(2,2)*w(2,5) + R(2,2)*w(5,2),R(1,0)*w(0,2) + R(1,1)*w(1,2) + R(1,2)*w(2,2) - R(2,0)*w(0,1) - R(2,1)*w(1,1) - R(2,2)*w(2,1),R(2,0)*w(0,0) - R(0,1)*w(1,2) - R(0,2)*w(2,2) - R(0,0)*w(0,2) + R(2,1)*w(1,0) + R(2,2)*w(2,0),R(0,0)*w(0,1) + R(0,1)*w(1,1) + R(0,2)*w(2,1) - R(1,0)*w(0,0) - R(1,1)*w(1,0) - R(1,2)*w(2,0);
    return row;
    }
    

Eigen::Vector3d solve_translation(
                                                const Eigen::Matrix3d &R,
                                                const Eigen::Matrix<double,6,6> &w1,
                                                const Eigen::Matrix<double,6,6> &w2,
                                                const Eigen::Matrix<double,6,6> &w3,
                                                const Eigen::Matrix<double,6,6> &w4,
                                                const Eigen::Matrix<double,6,6> &w5,
                                                const Eigen::Matrix<double,6,6> &w6,
                                                int &rank
                                                )
{
    Eigen::Matrix<double,6,4> A;
    A <<
    get_row(R,w1),
    get_row(R,w2),
    get_row(R,w3),
    get_row(R,w4),
    get_row(R,w5),
    get_row(R,w6);
    Eigen::JacobiSVD<Eigen::Matrix<double,6,4> > jacobiSvd(A,Eigen::ComputeFullV);
//    jacobiSvd.setThreshold(0.0075);
//    rank = jacobiSvd.rank();
    rank = 4;
    //std::cout << "rank: " << jacobiSvd.rank() << "\n";
    const Eigen::Matrix<double,4,1> t = jacobiSvd.matrixV().col(3);
    return t.tail(3)/t[0];
}

Eigen::Vector3d solve_translation(
                                                const Eigen::Matrix3d &R,
                                                const std::vector< Eigen::Matrix<double,6,6> > &w
                                                )
{
    Eigen::MatrixXd A(w.size(),4);
    for ( size_t i = 0; i < w.size(); i++ ) A.row(i) = get_row(R,w[i]);
    Eigen::JacobiSVD<Eigen::MatrixXd> jacobiSVD(A,Eigen::ComputeThinV);
    const Eigen::Matrix<double,4,1> t = jacobiSVD.matrixV().col(3);
    return t.tail(3)/t[0];
}


static inline Eigen::RowVector3d get_row( const Eigen::Matrix3d &R, const Eigen::Matrix3d &w )
{
    Eigen::Matrix<double,1,3> row;
    row << R(1,0)*w(0,2) + R(1,1)*w(1,2) + R(1,2)*w(2,2) - R(2,0)*w(0,1) - R(2,1)*w(1,1) - R(2,2)*w(2,1), R(2,0)*w(0,0) - R(0,1)*w(1,2) - R(0,2)*w(2,2) - R(0,0)*w(0,2) + R(2,1)*w(1,0) + R(2,2)*w(2,0), R(0,0)*w(0,1) + R(0,1)*w(1,1) + R(0,2)*w(2,1) - R(1,0)*w(0,0) - R(1,1)*w(1,0) - R(1,2)*w(2,0);
    return row;
}

Eigen::Vector3d solve_translation(
                                  const Eigen::Matrix3d &R,
                                  const Eigen::Matrix3d &w1,
                                  const Eigen::Matrix3d &w2,
                                  const Eigen::Matrix3d &w3,
                                  const Eigen::Matrix3d &w4,
                                  const Eigen::Matrix3d &w5
                                  )
{
    Eigen::Matrix<double,5,3> A;
    A <<
    get_row(R,w1),
    get_row(R,w2),
    get_row(R,w3),
    get_row(R,w4),
    get_row(R,w5);
    return A.jacobiSvd(Eigen::ComputeFullV).matrixV().col(2);
}

Eigen::Vector3d solve_translation(
                                  const Eigen::Matrix3d &R,
                                  const std::vector<Eigen::Matrix3d> &w
                                  )
{
    Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> A(w.size(),3);
    for ( size_t i = 0; i < w.size(); i++ ) A.row(i) << get_row(R,w[i]);
    return A.jacobiSvd(Eigen::ComputeThinV).matrixV().col(2);
}

Eigen::Matrix<double,3,4> get_translation_affine_rows(
                                                      const Eigen::Matrix3d &R,
                                                      const double &x1,
                                                      const double &x2,
                                                      const double &y1,
                                                      const double &y2,
                                                      const Eigen::Vector3d &cu,
                                                      const Eigen::Vector3d &cv,
                                                      const Eigen::Matrix2d &Au,
                                                      const Eigen::Matrix2d &Av
                                                      )
{
    Eigen::Matrix2d A = Av * Au.inverse();
    const double t2 = A(0,1)*x2;
    const double t3 = t2 + y1;
    const double t4 = A(1,1)*x2;
    const double t5 = t4 + y2;
    const double t6 = R(0,0)*cu(2);
    const double t7 = R(2,1)*cv(1);
    const double t40 = R(0,2)*cu(0);
    const double t41 = R(1,1)*cv(2);
    const double t8 = t6 + t7 - t40 - t41;
    const double t9 = R(1,0)*cu(2);
    const double t10 = R(0,1)*cv(2);
    const double t42 = R(1,2)*cu(0);
    const double t43 = R(2,1)*cv(0);
    const double t11 = t9 + t10 - t42 - t43;
    const double t12 = R(2,0)*cu(2);
    const double t13 = R(1,1)*cv(0);
    const double t14 = R(0,0)*cu(1);
    const double t15 = R(1,2)*cv(2);
    const double t36 = R(0,1)*cu(0);
    const double t37 = R(2,2)*cv(1);
    const double t16 = t14 + t15 - t36 - t37;
    const double t17 = R(1,0)*cu(1);
    const double t18 = R(2,2)*cv(0);
    const double t38 = R(1,1)*cu(0);
    const double t39 = R(0,2)*cv(2);
    const double t19 = t17 + t18 - t38 - t39;
    const double t20 = R(0,1)*cu(2);
    const double t21 = R(1,0)*cv(2);
    const double t30 = R(0,2)*cu(1);
    const double t31 = R(2,0)*cv(1);
    const double t22 = t20 + t21 - t30 - t31;
    const double t23 = R(1,1)*cu(2);
    const double t24 = R(2,0)*cv(0);
    const double t32 = R(1,2)*cu(1);
    const double t33 = R(0,0)*cv(2);
    const double t25 = t23 + t24 - t32 - t33;
    const double t26 = A(0,0)*x1;
    const double t27 = t26 + y1;
    const double t28 = A(1,0)*x1;
    const double t29 = t28 + y2;
    const double t34 = R(2,1)*cu(2);
    const double t35 = R(0,0)*cv(1);
    Eigen::Matrix<double,3,4> rows;
    rows << R(1,2) + R(1,0)*x1 + R(1,1)*x2 - R(2,2)*y2 - R(2,0)*x1*y2 - R(2,1)*x2*y2, R(2,2)*y1 - R(0,0)*x1 - R(0,1)*x2 - R(0,2) + R(2,0)*x1*y1 + R(2,1)*x2*y1, R(0,2)*y2 - R(1,2)*y1 + R(0,0)*x1*y2 + R(0,1)*x2*y2 - R(1,0)*x1*y1 - R(1,1)*x2*y1, R(2,0)*cu(1) - R(2,1)*cu(0) + R(0,2)*cv(1) - R(1,2)*cv(0) - x2*(t12 + t13 - R(2,2)*cu(0) - R(0,1)*cv(1)) + x1*(t34 + t35 - R(2,2)*cu(1) - R(1,0)*cv(0)) + t16*y1 + t19*y2 - t8*x2*y1 - t11*x2*y2 + t22*x1*y1 + t25*x1*y2,
    R(1,1) - R(2,1)*t5 - A(1,1)*R(2,2) - A(1,1)*R(2,0)*x1, R(2,1)*t3 - R(0,1) + A(0,1)*R(2,2) + A(0,1)*R(2,0)*x1, R(0,1)*t5 - R(1,1)*t3 - A(0,1)*R(1,2) + A(1,1)*R(0,2) - A(0,1)*R(1,0)*x1 + A(1,1)*R(0,0)*x1, A(0,1)*t16 - t13 - t12 + A(1,1)*t19 + R(2,2)*cu(0) + R(0,1)*cv(1) - t3*t8 - t5*t11 + A(0,1)*t22*x1 + A(1,1)*t25*x1,
    R(1,0) - R(2,0)*t29 - A(1,0)*R(2,2) - A(1,0)*R(2,1)*x2, R(2,0)*t27 - R(0,0) + A(0,0)*R(2,2) + A(0,0)*R(2,1)*x2, R(0,0)*t29 - R(1,0)*t27 - A(0,0)*R(1,2) + A(1,0)*R(0,2) - A(0,0)*R(1,1)*x2 + A(1,0)*R(0,1)*x2, t34 + t35 + A(0,0)*t16 + A(1,0)*t19 - R(2,2)*cu(1) - R(1,0)*cv(0) + t22*t27 + t25*t29 - A(0,0)*t8*x2 - A(1,0)*t11*x2;
    return rows;
}

Eigen::Vector3d solve_translation_affine(
                                         const Eigen::Matrix3d &R,
                                         const Eigen::Matrix<double,1,2> &x1,
                                         const Eigen::Matrix<double,1,2> &x2,
                                         const Eigen::Matrix<double,1,2> &y1,
                                         const Eigen::Matrix<double,1,2> &y2,
                                         const Eigen::Matrix<double,3,2> &cu,
                                         const Eigen::Matrix<double,3,2> &cv,
                                         const Eigen::Matrix2d Au[],
                                         const Eigen::Matrix2d Av[]
                                         )
{
    Eigen::Matrix<double,6,4> A;
    A <<
    get_translation_affine_rows(R,x1[0],x2[0],y1[0],y2[0],cu.col(0),cv.col(0),Au[0],Av[0]),
    get_translation_affine_rows(R,x1[1],x2[1],y1[1],y2[1],cu.col(1),cv.col(1),Au[1],Av[1]);
    Eigen::JacobiSVD<Eigen::Matrix<double,6,4> > jacobiSvd(A,Eigen::ComputeFullV);
    const Eigen::Matrix<double,4,1> t = jacobiSvd.matrixV().col(3);
    return t.head(3)/t[3];
}

//Eigen::Matrix3d skew3(const Eigen::Vector3d &v )
//{
//    Eigen::Matrix3d s;
//    s <<
//    0, -v[2], v[1],
//    v[2], 0, -v[0],
//    -v[1], v[0], 0;
//    return s;
//}

//Eigen::Matrix3d so3exp(const Eigen::Vector3d &r)
//{
//    if ( r.norm() < 1e-10 ) return Eigen::Matrix3d::Identity();
//    const double theta = r.norm();
//    const Eigen::Matrix3d K = skew3(r/theta);
//    const Eigen::Matrix3d R = Eigen::Matrix3d::Identity() + sin(theta)*K+(1-cos(theta))*K*K;
//    return R;
//}

Eigen::Vector3d so3ln(const Eigen::Matrix3d &R)
{
     Eigen::Vector3d result;
     
     const double cos_angle = (R(0,0) + R(1,1) + R(2,2) - 1.0) * 0.5;
     result[0] = (R(2,1)-R(1,2))/2;
     result[1] = (R(0,2)-R(2,0))/2;
     result[2] = (R(1,0)-R(0,1))/2;
     
     double sin_angle_abs = sqrt(result.dot(result));
     if (cos_angle > M_SQRT1_2) {            // [0 - Pi/4[ use asin
         if(sin_angle_abs > 0){
             result *= asin(sin_angle_abs) / sin_angle_abs;
         }
     } else if( cos_angle > -M_SQRT1_2) {    // [Pi/4 - 3Pi/4[ use acos, but antisymmetric part
         double angle = acos(cos_angle);
         result *= angle / sin_angle_abs;        
     } else {  // rest use symmetric part
         // antisymmetric part vanishes, but still large rotation, need information from symmetric part
         const double angle = M_PI - asin(sin_angle_abs);
         const double d0 = R(0,0) - cos_angle,
             d1 = R(1,1) - cos_angle,
             d2 = R(2,2) - cos_angle;
         Eigen::Vector3d r2;
         if(fabs(d0) > fabs(d1) && fabs(d0) > fabs(d2)){ // first is largest, fill with first column
             r2[0] = d0;
             r2[1] = (R(1,0)+R(0,1))/2;
             r2[2] = (R(0,2)+R(2,0))/2;
         } else if(fabs(d1) > fabs(d2)) {                // second is largest, fill with second column
             r2[0] = (R(1,0)+R(0,1))/2;
             r2[1] = d1;
             r2[2] = (R(2,1)+R(1,2))/2;
         } else {                                // third is largest, fill with third column
             r2[0] = (R(0,2)+R(2,0))/2;
             r2[1] = (R(2,1)+R(1,2))/2;
             r2[2] = d2;
         }
         // flip, if we point in the wrong direction!
         if(r2.dot(result) < 0)
             r2 *= -1;
         r2 = r2/r2.norm();
         result = angle * r2;
     } 
    return result;
}

/*
double sampson(
                            const Eigen::Matrix<double,6,6> &GE,
                            const Eigen::Matrix<double,6,1> &u,
                            const Eigen::Matrix<double,6,1> &v
                            )
{
    const Eigen::Matrix<double,6,1> GEu = GE*u;
    const Eigen::Matrix<double,6,1> GEtv = GE.transpose()*v;
    Eigen::Matrix<double,10,1> GEuGEtv;
    GEuGEtv << GEu.head(2),GEu.tail(3),GEtv.head(2),GEtv.tail(3);
    const double vtGEu = v.dot( GEu );
    return (vtGEu*vtGEu)/(GEuGEtv.dot(GEuGEtv));
}

double sampson(
                            const Eigen::Matrix<double,6,6> &GE,
                            const Eigen::Matrix<double,3,1> &xu,
                            const Eigen::Matrix<double,3,1> &cu,
                            const Eigen::Matrix<double,3,1> &xv,
                            const Eigen::Matrix<double,3,1> &cv
                            )
{
    const double t6 = GE(1,3)*cu(1);
    const double t7 = GE(1,4)*cu(0);
    const double t8 = GE(3,2)*cv(2);
    const double t9 = GE(5,2)*cv(0);
    const double t10 = GE(1,0)*xu(0);
    const double t11 = GE(1,1)*xu(1);
    const double t12 = GE(3,3)*cu(1)*cv(2);
    const double t13 = GE(3,4)*cu(0)*cv(2);
    const double t14 = GE(5,3)*cu(1)*cv(0);
    const double t15 = GE(5,4)*cu(0)*cv(0);
    const double t16 = GE(1,3)*cu(2)*xu(1);
    const double t17 = GE(1,4)*cu(2)*xu(0);
    const double t18 = GE(1,5)*cu(0)*xu(1);
    const double t19 = GE(1,5)*cu(1)*xu(0);
    const double t20 = GE(3,0)*cv(2)*xu(0);
    const double t21 = GE(3,1)*cv(2)*xu(1);
    const double t22 = GE(5,0)*cv(0)*xu(0);
    const double t23 = GE(5,1)*cv(0)*xu(1);
    const double t24 = GE(3,3)*cu(2)*cv(2)*xu(1);
    const double t25 = GE(3,4)*cu(2)*cv(2)*xu(0);
    const double t26 = GE(3,5)*cu(0)*cv(2)*xu(1);
    const double t27 = GE(3,5)*cu(1)*cv(2)*xu(0);
    const double t28 = GE(5,3)*cu(2)*cv(0)*xu(1);
    const double t29 = GE(5,4)*cu(2)*cv(0)*xu(0);
    const double t30 = GE(5,5)*cu(0)*cv(0)*xu(1);
    const double t31 = GE(5,5)*cu(1)*cv(0)*xu(0);
    const double t2 = GE(1,2) + t6 - t7 - t8 + t9 + t10 + t11 - t12 + t13 + t14 - t15 - t16 + t17 + t18 - t19 - t20 - t21 + t22 + t23 + t24 - t25 - t26 + t27 - t28 + t29 + t30 - t31;
    const double t34 = GE(0,3)*cu(1);
    const double t35 = GE(0,4)*cu(0);
    const double t36 = GE(4,2)*cv(2);
    const double t37 = GE(5,2)*cv(1);
    const double t38 = GE(0,0)*xu(0);
    const double t39 = GE(0,1)*xu(1);
    const double t40 = GE(4,3)*cu(1)*cv(2);
    const double t41 = GE(4,4)*cu(0)*cv(2);
    const double t42 = GE(5,3)*cu(1)*cv(1);
    const double t43 = GE(5,4)*cu(0)*cv(1);
    const double t44 = GE(0,3)*cu(2)*xu(1);
    const double t45 = GE(0,4)*cu(2)*xu(0);
    const double t46 = GE(0,5)*cu(0)*xu(1);
    const double t47 = GE(0,5)*cu(1)*xu(0);
    const double t48 = GE(4,0)*cv(2)*xu(0);
    const double t49 = GE(4,1)*cv(2)*xu(1);
    const double t50 = GE(5,0)*cv(1)*xu(0);
    const double t51 = GE(5,1)*cv(1)*xu(1);
    const double t52 = GE(4,3)*cu(2)*cv(2)*xu(1);
    const double t53 = GE(4,4)*cu(2)*cv(2)*xu(0);
    const double t54 = GE(4,5)*cu(0)*cv(2)*xu(1);
    const double t55 = GE(4,5)*cu(1)*cv(2)*xu(0);
    const double t56 = GE(5,3)*cu(2)*cv(1)*xu(1);
    const double t57 = GE(5,4)*cu(2)*cv(1)*xu(0);
    const double t58 = GE(5,5)*cu(0)*cv(1)*xu(1);
    const double t59 = GE(5,5)*cu(1)*cv(1)*xu(0);
    const double t3 = GE(0,2) + t34 - t35 + t36 - t37 + t38 + t39 + t40 - t41 - t42 + t43 - t44 + t45 + t46 - t47 + t48 + t49 - t50 - t51 - t52 + t53 + t54 - t55 + t56 - t57 - t58 + t59;
    const double t61 = GE(2,3)*cu(2);
    const double t62 = GE(2,5)*cu(0);
    const double t63 = GE(3,1)*cv(1);
    const double t64 = GE(4,1)*cv(0);
    const double t65 = GE(0,1)*xv(0);
    const double t66 = GE(1,1)*xv(1);
    const double t67 = GE(3,3)*cu(2)*cv(1);
    const double t68 = GE(3,5)*cu(0)*cv(1);
    const double t69 = GE(4,3)*cu(2)*cv(0);
    const double t70 = GE(4,5)*cu(0)*cv(0);
    const double t71 = GE(0,3)*cu(2)*xv(0);
    const double t72 = GE(0,5)*cu(0)*xv(0);
    const double t73 = GE(1,3)*cu(2)*xv(1);
    const double t74 = GE(1,5)*cu(0)*xv(1);
    const double t75 = GE(3,1)*cv(2)*xv(1);
    const double t76 = GE(4,1)*cv(2)*xv(0);
    const double t77 = GE(5,1)*cv(0)*xv(1);
    const double t78 = GE(5,1)*cv(1)*xv(0);
    const double t79 = GE(3,3)*cu(2)*cv(2)*xv(1);
    const double t80 = GE(3,5)*cu(0)*cv(2)*xv(1);
    const double t81 = GE(4,3)*cu(2)*cv(2)*xv(0);
    const double t82 = GE(4,5)*cu(0)*cv(2)*xv(0);
    const double t83 = GE(5,3)*cu(2)*cv(0)*xv(1);
    const double t84 = GE(5,3)*cu(2)*cv(1)*xv(0);
    const double t85 = GE(5,5)*cu(0)*cv(0)*xv(1);
    const double t86 = GE(5,5)*cu(0)*cv(1)*xv(0);
    const double t4 = GE(2,1) - t61 + t62 + t63 - t64 + t65 + t66 - t67 + t68 + t69 - t70 - t71 + t72 - t73 + t74 - t75 + t76 + t77 - t78 + t79 - t80 - t81 + t82 - t83 + t84 + t85 - t86;
    const double t88 = GE(2,4)*cu(2);
    const double t89 = GE(2,5)*cu(1);
    const double t90 = GE(3,0)*cv(1);
    const double t91 = GE(4,0)*cv(0);
    const double t92 = GE(0,0)*xv(0);
    const double t93 = GE(1,0)*xv(1);
    const double t94 = GE(3,4)*cu(2)*cv(1);
    const double t95 = GE(3,5)*cu(1)*cv(1);
    const double t96 = GE(4,4)*cu(2)*cv(0);
    const double t97 = GE(4,5)*cu(1)*cv(0);
    const double t98 = GE(0,4)*cu(2)*xv(0);
    const double t99 = GE(0,5)*cu(1)*xv(0);
    const double t100 = GE(1,4)*cu(2)*xv(1);
    const double t101 = GE(1,5)*cu(1)*xv(1);
    const double t102 = GE(3,0)*cv(2)*xv(1);
    const double t103 = GE(4,0)*cv(2)*xv(0);
    const double t104 = GE(5,0)*cv(0)*xv(1);
    const double t105 = GE(5,0)*cv(1)*xv(0);
    const double t106 = GE(3,4)*cu(2)*cv(2)*xv(1);
    const double t107 = GE(3,5)*cu(1)*cv(2)*xv(1);
    const double t108 = GE(4,4)*cu(2)*cv(2)*xv(0);
    const double t109 = GE(4,5)*cu(1)*cv(2)*xv(0);
    const double t110 = GE(5,4)*cu(2)*cv(0)*xv(1);
    const double t111 = GE(5,4)*cu(2)*cv(1)*xv(0);
    const double t112 = GE(5,5)*cu(1)*cv(0)*xv(1);
    const double t113 = GE(5,5)*cu(1)*cv(1)*xv(0);
    const double t5 = GE(2,0) + t88 - t89 + t90 - t91 + t92 + t93 + t94 - t95 - t96 + t97 + t98 - t99 + t100 - t101 - t102 + t103 + t104 - t105 - t106 + t107 + t108 - t109 + t110 - t111 - t112 + t113;
    const double t32 = t2*t2;
    const double t117 = GE(2,3)*cu(1);
    const double t118 = GE(2,4)*cu(0);
    const double t119 = GE(3,2)*cv(1);
    const double t120 = GE(4,2)*cv(0);
    const double t121 = GE(2,0)*xu(0);
    const double t122 = GE(2,1)*xu(1);
    const double t123 = GE(0,2)*xv(0);
    const double t124 = GE(1,2)*xv(1);
    const double t125 = GE(3,3)*cu(1)*cv(1);
    const double t126 = GE(3,4)*cu(0)*cv(1);
    const double t127 = GE(4,3)*cu(1)*cv(0);
    const double t128 = GE(4,4)*cu(0)*cv(0);
    const double t129 = GE(2,3)*cu(2)*xu(1);
    const double t130 = GE(2,4)*cu(2)*xu(0);
    const double t131 = GE(2,5)*cu(0)*xu(1);
    const double t132 = GE(2,5)*cu(1)*xu(0);
    const double t133 = GE(0,3)*cu(1)*xv(0);
    const double t134 = GE(0,4)*cu(0)*xv(0);
    const double t135 = GE(1,3)*cu(1)*xv(1);
    const double t136 = GE(1,4)*cu(0)*xv(1);
    const double t137 = GE(3,0)*cv(1)*xu(0);
    const double t138 = GE(3,1)*cv(1)*xu(1);
    const double t139 = GE(4,0)*cv(0)*xu(0);
    const double t140 = GE(4,1)*cv(0)*xu(1);
    const double t141 = GE(3,2)*cv(2)*xv(1);
    const double t142 = GE(4,2)*cv(2)*xv(0);
    const double t143 = GE(5,2)*cv(0)*xv(1);
    const double t144 = GE(5,2)*cv(1)*xv(0);
    const double t145 = GE(0,0)*xu(0)*xv(0);
    const double t146 = GE(0,1)*xu(1)*xv(0);
    const double t147 = GE(1,0)*xu(0)*xv(1);
    const double t148 = GE(1,1)*xu(1)*xv(1);
    const double t149 = GE(3,3)*cu(2)*cv(1)*xu(1);
    const double t150 = GE(3,4)*cu(2)*cv(1)*xu(0);
    const double t151 = GE(3,5)*cu(0)*cv(1)*xu(1);
    const double t152 = GE(3,5)*cu(1)*cv(1)*xu(0);
    const double t153 = GE(4,3)*cu(2)*cv(0)*xu(1);
    const double t154 = GE(4,4)*cu(2)*cv(0)*xu(0);
    const double t155 = GE(4,5)*cu(0)*cv(0)*xu(1);
    const double t156 = GE(4,5)*cu(1)*cv(0)*xu(0);
    const double t157 = GE(3,3)*cu(1)*cv(2)*xv(1);
    const double t158 = GE(3,4)*cu(0)*cv(2)*xv(1);
    const double t159 = GE(4,3)*cu(1)*cv(2)*xv(0);
    const double t160 = GE(4,4)*cu(0)*cv(2)*xv(0);
    const double t161 = GE(5,3)*cu(1)*cv(0)*xv(1);
    const double t162 = GE(5,3)*cu(1)*cv(1)*xv(0);
    const double t163 = GE(5,4)*cu(0)*cv(0)*xv(1);
    const double t164 = GE(5,4)*cu(0)*cv(1)*xv(0);
    const double t165 = GE(0,3)*cu(2)*xu(1)*xv(0);
    const double t166 = GE(0,4)*cu(2)*xu(0)*xv(0);
    const double t167 = GE(0,5)*cu(0)*xu(1)*xv(0);
    const double t168 = GE(0,5)*cu(1)*xu(0)*xv(0);
    const double t169 = GE(1,3)*cu(2)*xu(1)*xv(1);
    const double t170 = GE(1,4)*cu(2)*xu(0)*xv(1);
    const double t171 = GE(1,5)*cu(0)*xu(1)*xv(1);
    const double t172 = GE(1,5)*cu(1)*xu(0)*xv(1);
    const double t173 = GE(3,0)*cv(2)*xu(0)*xv(1);
    const double t174 = GE(3,1)*cv(2)*xu(1)*xv(1);
    const double t175 = GE(4,0)*cv(2)*xu(0)*xv(0);
    const double t176 = GE(4,1)*cv(2)*xu(1)*xv(0);
    const double t177 = GE(5,0)*cv(0)*xu(0)*xv(1);
    const double t178 = GE(5,0)*cv(1)*xu(0)*xv(0);
    const double t179 = GE(5,1)*cv(0)*xu(1)*xv(1);
    const double t180 = GE(5,1)*cv(1)*xu(1)*xv(0);
    const double t181 = GE(3,3)*cu(2)*cv(2)*xu(1)*xv(1);
    const double t182 = GE(3,4)*cu(2)*cv(2)*xu(0)*xv(1);
    const double t183 = GE(3,5)*cu(0)*cv(2)*xu(1)*xv(1);
    const double t184 = GE(3,5)*cu(1)*cv(2)*xu(0)*xv(1);
    const double t185 = GE(4,3)*cu(2)*cv(2)*xu(1)*xv(0);
    const double t186 = GE(4,4)*cu(2)*cv(2)*xu(0)*xv(0);
    const double t187 = GE(4,5)*cu(0)*cv(2)*xu(1)*xv(0);
    const double t188 = GE(4,5)*cu(1)*cv(2)*xu(0)*xv(0);
    const double t189 = GE(5,3)*cu(2)*cv(0)*xu(1)*xv(1);
    const double t190 = GE(5,3)*cu(2)*cv(1)*xu(1)*xv(0);
    const double t191 = GE(5,4)*cu(2)*cv(0)*xu(0)*xv(1);
    const double t192 = GE(5,4)*cu(2)*cv(1)*xu(0)*xv(0);
    const double t193 = GE(5,5)*cu(0)*cv(0)*xu(1)*xv(1);
    const double t194 = GE(5,5)*cu(0)*cv(1)*xu(1)*xv(0);
    const double t195 = GE(5,5)*cu(1)*cv(0)*xu(0)*xv(1);
    const double t196 = GE(5,5)*cu(1)*cv(1)*xu(0)*xv(0);
    const double t33 = GE(2,2) + t117 - t118 + t119 - t120 + t121 + t122 + t123 + t124 + t125 - t126 - t127 + t128 - t129 + t130 + t131 - t132 + t133 - t134 + t135 - t136 + t137 + t138 - t139 - t140 - t141 + t142 + t143 - t144 + t145 + t146 + t147 + t148 - t149 + t150 + t151 - t152 + t153 - t154 - t155 + t156 - t157 + t158 + t159 - t160 + t161 - t162 - t163 + t164 - t165 + t166 + t167 - t168 - t169 + t170 + t171 - t172 - t173 - t174 + t175 + t176 + t177 - t178 + t179 - t180 + t181 - t182 - t183 + t184 - t185 + t186 + t187 - t188 - t189 + t190 + t191 - t192 + t193 - t194 - t195 + t196;
    const double t60 = t3*t3;
    const double t87 = t4*t4;
    const double t114 = t5*t5;
    const double t115 = t32 + t60 + t87 + t114;
    const double t116 = 1/(t115*t115);
    const double t197 = t33*t33;
    return t32*t116*t197 + t60*t116*t197 + t87*t116*t197 + t114*t116*t197;
}

double sampson(
                            const Eigen::Matrix3d &E,
                            const Eigen::Vector3d &u,
                            const Eigen::Vector3d &v
                            )
{
    const Eigen::Vector3d Eu = E * u;
    const Eigen::Vector3d Etv = E.transpose() * v;
    Eigen::Matrix<double,4,1> EuEtv;
    EuEtv << Eu.head(2),Etv.head(2);
    const double vtEu = v.dot( Eu );
    return (vtEu*vtEu)/(EuEtv.dot(EuEtv));
}
*/

//Eigen::Matrix<double,6,1> RayFromIm( const Eigen::Vector3d &im, const Eigen::Vector3d &c )
//{
//    Eigen::Matrix<double,6,1> r;
//    
//    r.head(3) = im/im(2);
//    r.tail(3) = c.cross(im/im(2));
//    
//    return r;
//}
//
//Eigen::Matrix3d makeE( const Eigen::Matrix4d &P )
//{
//    return skew3(P.block<3,1>(0,3)) * P.block<3,3>(0,0);
//}

Eigen::Vector3d triangulate( const Eigen::Matrix4d &rel_pose, const Eigen::Vector2d &point0, const Eigen::Vector2d &point1 )
{
    const Eigen::Matrix<double,3,4> P = rel_pose.block<3,4>(0,0);
    
    Eigen::Matrix4d J;
    
    J.row(0) << -1, 0, point0[0], 0;
    J.row(1) << 0, -1, point0[1], 0;
    J.row(2) = P.row(2) * point1[0] - P.row(0);
    J.row(3) = P.row(2) * point1[1] - P.row(1);
    
    Eigen::Vector4d Xh = J.jacobiSvd( Eigen::ComputeFullV ).matrixV().col(3);
    Eigen::Vector3d X = Xh.head(3)/Xh(3);
    
    return X;
}

Eigen::Vector3d refinepoint( const Eigen::Matrix4d &rel_pose, const Eigen::Vector2d &point0, const Eigen::Vector2d &point1, const Eigen::Vector3d &X_in )
{
    const Eigen::Matrix3d R = rel_pose.block<3,3>(0,0);
    const Eigen::Vector3d t = rel_pose.block<3,1>(0,3);
    
    Eigen::Vector3d saveX = X_in;
    Eigen::Vector3d X = X_in;
    
    Eigen::Vector3d PX = R*X+t;
    Eigen::Vector2d proj0 = X.head(2)/X(2);
    Eigen::Vector2d proj1 = PX.head(2)/PX(2);
    
    Eigen::Vector4d err;
    err.head(2) = point0-proj0;
    err.tail(2) = point1-proj1;
    
    double last_err_norm = err.norm();
    
    //    std::cout << "X before refinement: " << X.transpose() << "\n";
    
    // non-linear refinement
    for ( int i = 0; i < 10; i++ )
    {
        const double invX2 = 1./X(2);
        const double invPX2 = 1./PX(2);
        const double invX2sq = invX2*invX2;
        const double invPX2sq = invPX2*invPX2;
        
        Eigen::Matrix<double,4,3> J;
        J.row(0) << -invX2, 0, X(0)*invX2sq;
        J.row(1) << 0, -invX2, X(1)*invX2sq;
        J.row(2) << (R(2,0)*PX(0))*invPX2sq - R(0,0)*invPX2,
        (R(2,1)*PX(0))*invPX2sq - R(0,1)*invPX2,
        (R(2,2)*PX(0))*invPX2sq - R(0,2)*invPX2;
        J.row(3) << (R(2,0)*PX(1))*invPX2sq - R(1,0)*invPX2,
        (R(2,1)*PX(1))*invPX2sq - R(1,1)*invPX2,
        (R(2,2)*PX(1))*invPX2sq - R(1,2)*invPX2;
        
        const Eigen::Vector3d Jterr = J.transpose()*err;
        Eigen::Matrix3d JtJ = J.transpose()*J;
        
        //        JtJ(0,0) += lambda*JtJ(0,0);
        //        JtJ(1,1) += lambda*JtJ(1,1);
        //        JtJ(2,2) += lambda*JtJ(2,2);
        
        const Eigen::Vector3d update = -JtJ.ldlt().solve(Jterr);
        
        const Eigen::Vector3d newX = X + update;
        
        PX = R*newX+t;
        proj0 = newX.head(2)/newX(2);
        proj1 = PX.head(2)/PX(2);
        err.head(2) = point0-proj0;
        err.tail(2) = point1-proj1;
        
        const double err_norm = err.norm();
        if ( err_norm > last_err_norm )
        {
            break;
            //            lambda *= 10;
        }
        else
        {
            last_err_norm = err_norm;
            //            lambda /= 10;
            X += update;
        }
        //        std::cout << "step " << i << ": " << err.norm() << "\n";
        //        std::cout << "step size: " << update.norm() << "\n";
    }
    //    std::cout << "X after refinement: " << X.transpose() << "\n";
    //    std::cout << "\n";
    
    return X;
}
