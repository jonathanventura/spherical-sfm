#include <iostream>
#include <vector>
#include <numeric>
#include <Eigen/Dense>





using namespace Eigen;



void solver_stewenius(Eigen::MatrixXd const& NE, std::vector<Eigen::MatrixXcd>* w)
{
    // Compute coefficients
    
double const* NE_data = NE.data();
double const B11 = NE_data[0];
double const B21 = NE_data[1];
double const B31 = NE_data[2];
double const B41 = NE_data[3];
double const B51 = NE_data[4];
double const B61 = NE_data[5];
double const B71 = NE_data[6];
double const B81 = NE_data[7];
double const B91 = NE_data[8];
double const B12 = NE_data[9];
double const B22 = NE_data[10];
double const B32 = NE_data[11];
double const B42 = NE_data[12];
double const B52 = NE_data[13];
double const B62 = NE_data[14];
double const B72 = NE_data[15];
double const B82 = NE_data[16];
double const B92 = NE_data[17];
double const B13 = NE_data[18];
double const B23 = NE_data[19];
double const B33 = NE_data[20];
double const B43 = NE_data[21];
double const B53 = NE_data[22];
double const B63 = NE_data[23];
double const B73 = NE_data[24];
double const B83 = NE_data[25];
double const B93 = NE_data[26];
double const B14 = NE_data[27];
double const B24 = NE_data[28];
double const B34 = NE_data[29];
double const B44 = NE_data[30];
double const B54 = NE_data[31];
double const B64 = NE_data[32];
double const B74 = NE_data[33];
double const B84 = NE_data[34];
double const B94 = NE_data[35];
    VectorXd coeffs(200);
  double _t2_ = B11*B11;
  double _t3_ = B12*B12;
  double _t4_ = B13*B13;
  double _t5_ = B14*B14;
  double _t6_ = B21*B21;
  double _t7_ = B22*B22;
  double _t8_ = B23*B23;
  double _t9_ = B24*B24;
  double _t10_ = B31*B31;
  double _t11_ = B32*B32;
  double _t12_ = B33*B33;
  double _t13_ = B34*B34;
  double _t14_ = B41*B41;
  double _t15_ = B42*B42;
  double _t16_ = B43*B43;
  double _t17_ = B44*B44;
  double _t18_ = B51*B51;
  double _t19_ = B52*B52;
  double _t20_ = B53*B53;
  double _t21_ = B54*B54;
  double _t22_ = B61*B61;
  double _t23_ = B62*B62;
  double _t24_ = B63*B63;
  double _t25_ = B64*B64;
  double _t26_ = B71*B71;
  double _t27_ = B72*B72;
  double _t28_ = B73*B73;
  double _t29_ = B74*B74;
  double _t30_ = B81*B81;
  double _t31_ = B82*B82;
  double _t32_ = B83*B83;
  double _t33_ = B84*B84;
  double _t34_ = B91*B91;
  double _t35_ = B92*B92;
  double _t36_ = B93*B93;
  double _t37_ = B94*B94;
  double _t38_ = B11*B12*2.0;
  double _t39_ = B11*B13*2.0;
  double _t40_ = B11*B12*4.0;
  double _t41_ = B11*B14*2.0;
  double _t42_ = B12*B13*2.0;
  double _t43_ = B11*B13*4.0;
  double _t44_ = B12*B14*2.0;
  double _t45_ = B11*B14*4.0;
  double _t46_ = B12*B13*4.0;
  double _t47_ = B13*B14*2.0;
  double _t48_ = B12*B14*4.0;
  double _t49_ = B13*B14*4.0;
  double _t50_ = B11*B21*2.0;
  double _t51_ = B11*B22*2.0;
  double _t52_ = B12*B21*2.0;
  double _t53_ = B11*B23*2.0;
  double _t54_ = B12*B22*2.0;
  double _t55_ = B13*B21*2.0;
  double _t56_ = B11*B24*2.0;
  double _t57_ = B12*B23*2.0;
  double _t58_ = B13*B22*2.0;
  double _t59_ = B14*B21*2.0;
  double _t60_ = B12*B24*2.0;
  double _t61_ = B13*B23*2.0;
  double _t62_ = B14*B22*2.0;
  double _t63_ = B13*B24*2.0;
  double _t64_ = B14*B23*2.0;
  double _t65_ = B14*B24*2.0;
  double _t66_ = B11*B31*2.0;
  double _t67_ = B11*B32*2.0;
  double _t68_ = B12*B31*2.0;
  double _t69_ = B21*B22*2.0;
  double _t70_ = B11*B33*2.0;
  double _t71_ = B12*B32*2.0;
  double _t72_ = B13*B31*2.0;
  double _t73_ = B21*B23*2.0;
  double _t74_ = B11*B34*2.0;
  double _t75_ = B12*B33*2.0;
  double _t76_ = B13*B32*2.0;
  double _t77_ = B14*B31*2.0;
  double _t78_ = B21*B22*4.0;
  double _t79_ = B21*B24*2.0;
  double _t80_ = B22*B23*2.0;
  double _t81_ = B12*B34*2.0;
  double _t82_ = B13*B33*2.0;
  double _t83_ = B14*B32*2.0;
  double _t84_ = B21*B23*4.0;
  double _t85_ = B22*B24*2.0;
  double _t86_ = B13*B34*2.0;
  double _t87_ = B14*B33*2.0;
  double _t88_ = B21*B24*4.0;
  double _t89_ = B22*B23*4.0;
  double _t90_ = B23*B24*2.0;
  double _t91_ = B14*B34*2.0;
  double _t92_ = B22*B24*4.0;
  double _t93_ = B23*B24*4.0;
  double _t94_ = B21*B31*2.0;
  double _t95_ = B21*B32*2.0;
  double _t96_ = B22*B31*2.0;
  double _t97_ = B21*B33*2.0;
  double _t98_ = B22*B32*2.0;
  double _t99_ = B23*B31*2.0;
  double _t100_ = B21*B34*2.0;
  double _t101_ = B22*B33*2.0;
  double _t102_ = B23*B32*2.0;
  double _t103_ = B24*B31*2.0;
  double _t104_ = B22*B34*2.0;
  double _t105_ = B23*B33*2.0;
  double _t106_ = B24*B32*2.0;
  double _t107_ = B23*B34*2.0;
  double _t108_ = B24*B33*2.0;
  double _t109_ = B24*B34*2.0;
  double _t110_ = B31*B32*2.0;
  double _t111_ = B31*B33*2.0;
  double _t112_ = B31*B32*4.0;
  double _t113_ = B31*B34*2.0;
  double _t114_ = B32*B33*2.0;
  double _t115_ = B31*B33*4.0;
  double _t116_ = B32*B34*2.0;
  double _t117_ = B31*B34*4.0;
  double _t118_ = B32*B33*4.0;
  double _t119_ = B33*B34*2.0;
  double _t120_ = B32*B34*4.0;
  double _t121_ = B33*B34*4.0;
  double _t122_ = B41*B42*2.0;
  double _t123_ = B41*B43*2.0;
  double _t124_ = B41*B42*4.0;
  double _t125_ = B41*B44*2.0;
  double _t126_ = B42*B43*2.0;
  double _t127_ = B41*B43*4.0;
  double _t128_ = B42*B44*2.0;
  double _t129_ = B41*B44*4.0;
  double _t130_ = B42*B43*4.0;
  double _t131_ = B43*B44*2.0;
  double _t132_ = B42*B44*4.0;
  double _t133_ = B43*B44*4.0;
  double _t134_ = B41*B51*2.0;
  double _t135_ = B41*B52*2.0;
  double _t136_ = B42*B51*2.0;
  double _t137_ = B41*B53*2.0;
  double _t138_ = B42*B52*2.0;
  double _t139_ = B43*B51*2.0;
  double _t140_ = B41*B54*2.0;
  double _t141_ = B42*B53*2.0;
  double _t142_ = B43*B52*2.0;
  double _t143_ = B44*B51*2.0;
  double _t144_ = B42*B54*2.0;
  double _t145_ = B43*B53*2.0;
  double _t146_ = B44*B52*2.0;
  double _t147_ = B43*B54*2.0;
  double _t148_ = B44*B53*2.0;
  double _t149_ = B44*B54*2.0;
  double _t150_ = B41*B61*2.0;
  double _t151_ = B41*B62*2.0;
  double _t152_ = B42*B61*2.0;
  double _t153_ = B51*B52*2.0;
  double _t154_ = B41*B63*2.0;
  double _t155_ = B42*B62*2.0;
  double _t156_ = B43*B61*2.0;
  double _t157_ = B51*B53*2.0;
  double _t158_ = B41*B64*2.0;
  double _t159_ = B42*B63*2.0;
  double _t160_ = B43*B62*2.0;
  double _t161_ = B44*B61*2.0;
  double _t162_ = B51*B52*4.0;
  double _t163_ = B51*B54*2.0;
  double _t164_ = B52*B53*2.0;
  double _t165_ = B42*B64*2.0;
  double _t166_ = B43*B63*2.0;
  double _t167_ = B44*B62*2.0;
  double _t168_ = B51*B53*4.0;
  double _t169_ = B52*B54*2.0;
  double _t170_ = B43*B64*2.0;
  double _t171_ = B44*B63*2.0;
  double _t172_ = B51*B54*4.0;
  double _t173_ = B52*B53*4.0;
  double _t174_ = B53*B54*2.0;
  double _t175_ = B44*B64*2.0;
  double _t176_ = B52*B54*4.0;
  double _t177_ = B53*B54*4.0;
  double _t178_ = B51*B61*2.0;
  double _t179_ = B51*B62*2.0;
  double _t180_ = B52*B61*2.0;
  double _t181_ = B51*B63*2.0;
  double _t182_ = B52*B62*2.0;
  double _t183_ = B53*B61*2.0;
  double _t184_ = B51*B64*2.0;
  double _t185_ = B52*B63*2.0;
  double _t186_ = B53*B62*2.0;
  double _t187_ = B54*B61*2.0;
  double _t188_ = B52*B64*2.0;
  double _t189_ = B53*B63*2.0;
  double _t190_ = B54*B62*2.0;
  double _t191_ = B53*B64*2.0;
  double _t192_ = B54*B63*2.0;
  double _t193_ = B54*B64*2.0;
  double _t194_ = B61*B62*2.0;
  double _t195_ = B61*B63*2.0;
  double _t196_ = B61*B62*4.0;
  double _t197_ = B61*B64*2.0;
  double _t198_ = B62*B63*2.0;
  double _t199_ = B61*B63*4.0;
  double _t200_ = B62*B64*2.0;
  double _t201_ = B61*B64*4.0;
  double _t202_ = B62*B63*4.0;
  double _t203_ = B63*B64*2.0;
  double _t204_ = B62*B64*4.0;
  double _t205_ = B63*B64*4.0;
  double _t206_ = B71*B72*2.0;
  double _t207_ = B71*B73*2.0;
  double _t208_ = B71*B72*4.0;
  double _t209_ = B71*B74*2.0;
  double _t210_ = B72*B73*2.0;
  double _t211_ = B71*B73*4.0;
  double _t212_ = B72*B74*2.0;
  double _t213_ = B71*B74*4.0;
  double _t214_ = B72*B73*4.0;
  double _t215_ = B73*B74*2.0;
  double _t216_ = B72*B74*4.0;
  double _t217_ = B73*B74*4.0;
  double _t218_ = B71*B81*2.0;
  double _t219_ = B71*B82*2.0;
  double _t220_ = B72*B81*2.0;
  double _t221_ = B71*B83*2.0;
  double _t222_ = B72*B82*2.0;
  double _t223_ = B73*B81*2.0;
  double _t224_ = B71*B84*2.0;
  double _t225_ = B72*B83*2.0;
  double _t226_ = B73*B82*2.0;
  double _t227_ = B74*B81*2.0;
  double _t228_ = B72*B84*2.0;
  double _t229_ = B73*B83*2.0;
  double _t230_ = B74*B82*2.0;
  double _t231_ = B73*B84*2.0;
  double _t232_ = B74*B83*2.0;
  double _t233_ = B74*B84*2.0;
  double _t234_ = B71*B91*2.0;
  double _t235_ = B71*B92*2.0;
  double _t236_ = B72*B91*2.0;
  double _t237_ = B81*B82*2.0;
  double _t238_ = B71*B93*2.0;
  double _t239_ = B72*B92*2.0;
  double _t240_ = B73*B91*2.0;
  double _t241_ = B81*B83*2.0;
  double _t242_ = B71*B94*2.0;
  double _t243_ = B72*B93*2.0;
  double _t244_ = B73*B92*2.0;
  double _t245_ = B74*B91*2.0;
  double _t246_ = B81*B82*4.0;
  double _t247_ = B81*B84*2.0;
  double _t248_ = B82*B83*2.0;
  double _t249_ = B72*B94*2.0;
  double _t250_ = B73*B93*2.0;
  double _t251_ = B74*B92*2.0;
  double _t252_ = B81*B83*4.0;
  double _t253_ = B82*B84*2.0;
  double _t254_ = B73*B94*2.0;
  double _t255_ = B74*B93*2.0;
  double _t256_ = B81*B84*4.0;
  double _t257_ = B82*B83*4.0;
  double _t258_ = B83*B84*2.0;
  double _t259_ = B74*B94*2.0;
  double _t260_ = B82*B84*4.0;
  double _t261_ = B83*B84*4.0;
  double _t262_ = B81*B91*2.0;
  double _t263_ = B81*B92*2.0;
  double _t264_ = B82*B91*2.0;
  double _t265_ = B81*B93*2.0;
  double _t266_ = B82*B92*2.0;
  double _t267_ = B83*B91*2.0;
  double _t268_ = B81*B94*2.0;
  double _t269_ = B82*B93*2.0;
  double _t270_ = B83*B92*2.0;
  double _t271_ = B84*B91*2.0;
  double _t272_ = B82*B94*2.0;
  double _t273_ = B83*B93*2.0;
  double _t274_ = B84*B92*2.0;
  double _t275_ = B83*B94*2.0;
  double _t276_ = B84*B93*2.0;
  double _t277_ = B84*B94*2.0;
  double _t278_ = B91*B92*2.0;
  double _t279_ = B91*B93*2.0;
  double _t280_ = B91*B92*4.0;
  double _t281_ = B91*B94*2.0;
  double _t282_ = B92*B93*2.0;
  double _t283_ = B91*B93*4.0;
  double _t284_ = B92*B94*2.0;
  double _t285_ = B91*B94*4.0;
  double _t286_ = B92*B93*4.0;
  double _t287_ = B93*B94*2.0;
  double _t288_ = B92*B94*4.0;
  double _t289_ = B93*B94*4.0;
  double _t290_ = _t2_*2.0;
  double _t291_ = _t3_*2.0;
  double _t292_ = _t4_*2.0;
  double _t293_ = _t5_*2.0;
  double _t294_ = _t6_*2.0;
  double _t295_ = _t7_*2.0;
  double _t296_ = _t8_*2.0;
  double _t297_ = _t9_*2.0;
  double _t298_ = _t10_*2.0;
  double _t299_ = _t11_*2.0;
  double _t300_ = _t12_*2.0;
  double _t301_ = _t13_*2.0;
  double _t302_ = _t14_*2.0;
  double _t303_ = _t15_*2.0;
  double _t304_ = _t16_*2.0;
  double _t305_ = _t17_*2.0;
  double _t306_ = _t18_*2.0;
  double _t307_ = _t19_*2.0;
  double _t308_ = _t20_*2.0;
  double _t309_ = _t21_*2.0;
  double _t310_ = _t22_*2.0;
  double _t311_ = _t23_*2.0;
  double _t312_ = _t24_*2.0;
  double _t313_ = _t25_*2.0;
  double _t314_ = _t26_*2.0;
  double _t315_ = _t27_*2.0;
  double _t316_ = _t28_*2.0;
  double _t317_ = _t29_*2.0;
  double _t318_ = _t30_*2.0;
  double _t319_ = _t31_*2.0;
  double _t320_ = _t32_*2.0;
  double _t321_ = _t33_*2.0;
  double _t322_ = _t34_*2.0;
  double _t323_ = _t35_*2.0;
  double _t324_ = _t36_*2.0;
  double _t325_ = _t37_*2.0;
  double _t326_ = _t40_+_t124_+_t208_;
  double _t327_ = _t43_+_t127_+_t211_;
  double _t328_ = _t45_+_t129_+_t213_;
  double _t329_ = _t46_+_t130_+_t214_;
  double _t330_ = _t48_+_t132_+_t216_;
  double _t331_ = _t49_+_t133_+_t217_;
  double _t332_ = _t50_+_t134_+_t218_;
  double _t333_ = _t54_+_t138_+_t222_;
  double _t334_ = _t61_+_t145_+_t229_;
  double _t335_ = _t65_+_t149_+_t233_;
  double _t336_ = _t66_+_t150_+_t234_;
  double _t337_ = _t71_+_t155_+_t239_;
  double _t338_ = _t78_+_t162_+_t246_;
  double _t339_ = _t82_+_t166_+_t250_;
  double _t340_ = _t84_+_t168_+_t252_;
  double _t341_ = _t88_+_t172_+_t256_;
  double _t342_ = _t89_+_t173_+_t257_;
  double _t343_ = _t91_+_t175_+_t259_;
  double _t344_ = _t92_+_t176_+_t260_;
  double _t345_ = _t93_+_t177_+_t261_;
  double _t346_ = _t94_+_t178_+_t262_;
  double _t347_ = _t98_+_t182_+_t266_;
  double _t348_ = _t105_+_t189_+_t273_;
  double _t349_ = _t109_+_t193_+_t277_;
  double _t350_ = _t112_+_t196_+_t280_;
  double _t351_ = _t115_+_t199_+_t283_;
  double _t352_ = _t117_+_t201_+_t285_;
  double _t353_ = _t118_+_t202_+_t286_;
  double _t354_ = _t120_+_t204_+_t288_;
  double _t355_ = _t121_+_t205_+_t289_;
  double _t368_ = _t51_+_t52_+_t135_+_t136_+_t219_+_t220_;
  double _t369_ = _t53_+_t55_+_t137_+_t139_+_t221_+_t223_;
  double _t370_ = _t56_+_t59_+_t140_+_t143_+_t224_+_t227_;
  double _t371_ = _t57_+_t58_+_t141_+_t142_+_t225_+_t226_;
  double _t372_ = _t60_+_t62_+_t144_+_t146_+_t228_+_t230_;
  double _t373_ = _t63_+_t64_+_t147_+_t148_+_t231_+_t232_;
  double _t374_ = _t67_+_t68_+_t151_+_t152_+_t235_+_t236_;
  double _t375_ = _t70_+_t72_+_t154_+_t156_+_t238_+_t240_;
  double _t376_ = _t74_+_t77_+_t158_+_t161_+_t242_+_t245_;
  double _t377_ = _t75_+_t76_+_t159_+_t160_+_t243_+_t244_;
  double _t378_ = _t81_+_t83_+_t165_+_t167_+_t249_+_t251_;
  double _t379_ = _t86_+_t87_+_t170_+_t171_+_t254_+_t255_;
  double _t380_ = _t95_+_t96_+_t179_+_t180_+_t263_+_t264_;
  double _t381_ = _t97_+_t99_+_t181_+_t183_+_t265_+_t267_;
  double _t382_ = _t100_+_t103_+_t184_+_t187_+_t268_+_t271_;
  double _t383_ = _t101_+_t102_+_t185_+_t186_+_t269_+_t270_;
  double _t384_ = _t104_+_t106_+_t188_+_t190_+_t272_+_t274_;
  double _t385_ = _t107_+_t108_+_t191_+_t192_+_t275_+_t276_;
  double _t386_ = _t2_+_t6_+_t10_+_t14_+_t18_+_t22_+_t26_+_t30_+_t34_;
  double _t387_ = _t3_+_t7_+_t11_+_t15_+_t19_+_t23_+_t27_+_t31_+_t35_;
  double _t388_ = _t4_+_t8_+_t12_+_t16_+_t20_+_t24_+_t28_+_t32_+_t36_;
  double _t389_ = _t5_+_t9_+_t13_+_t17_+_t21_+_t25_+_t29_+_t33_+_t37_;
  double _t390_ = _t38_+_t69_+_t110_+_t122_+_t153_+_t194_+_t206_+_t237_+_t278_;
  double _t391_ = _t39_+_t73_+_t111_+_t123_+_t157_+_t195_+_t207_+_t241_+_t279_;
  double _t392_ = _t41_+_t79_+_t113_+_t125_+_t163_+_t197_+_t209_+_t247_+_t281_;
  double _t393_ = _t42_+_t80_+_t114_+_t126_+_t164_+_t198_+_t210_+_t248_+_t282_;
  double _t394_ = _t44_+_t85_+_t116_+_t128_+_t169_+_t200_+_t212_+_t253_+_t284_;
  double _t395_ = _t47_+_t90_+_t119_+_t131_+_t174_+_t203_+_t215_+_t258_+_t287_;
  double _t356_ = _t290_+_t302_+_t314_;
  double _t357_ = _t291_+_t303_+_t315_;
  double _t358_ = _t292_+_t304_+_t316_;
  double _t359_ = _t293_+_t305_+_t317_;
  double _t360_ = _t294_+_t306_+_t318_;
  double _t361_ = _t295_+_t307_+_t319_;
  double _t362_ = _t296_+_t308_+_t320_;
  double _t363_ = _t297_+_t309_+_t321_;
  double _t364_ = _t298_+_t310_+_t322_;
  double _t365_ = _t299_+_t311_+_t323_;
  double _t366_ = _t300_+_t312_+_t324_;
  double _t367_ = _t301_+_t313_+_t325_;
  coeffs[0] = B11*B51*B91-B11*B61*B81-B21*B41*B91+B21*B61*B71+B31*B41*B81-B31*B51*B71;
  coeffs[1] = B11*B51*B92+B11*B52*B91-B11*B61*B82-B11*B62*B81+B12*B51*B91-B12*B61*B81-B21*B41*B92-B21*B42*B91+B21*B61*B72+B21*B62*B71-B22*B41*B91+B22*B61*B71+B31*B41*B82+B31*B42*B81-B31*B51*B72-B31*B52*B71+B32*B41*B81-B32*B51*B71;
  coeffs[2] = B11*B51*B93+B11*B53*B91-B11*B61*B83-B11*B63*B81+B13*B51*B91-B13*B61*B81-B21*B41*B93-B21*B43*B91+B21*B61*B73+B21*B63*B71-B23*B41*B91+B23*B61*B71+B31*B41*B83+B31*B43*B81-B31*B51*B73-B31*B53*B71+B33*B41*B81-B33*B51*B71;
  coeffs[3] = B11*B51*B94+B11*B54*B91-B11*B61*B84-B11*B64*B81+B14*B51*B91-B14*B61*B81-B21*B41*B94-B21*B44*B91+B21*B61*B74+B21*B64*B71-B24*B41*B91+B24*B61*B71+B31*B41*B84+B31*B44*B81-B31*B51*B74-B31*B54*B71+B34*B41*B81-B34*B51*B71;
  coeffs[4] = B11*B52*B92-B11*B62*B82+B12*B51*B92+B12*B52*B91-B12*B61*B82-B12*B62*B81-B21*B42*B92+B21*B62*B72-B22*B41*B92-B22*B42*B91+B22*B61*B72+B22*B62*B71+B31*B42*B82-B31*B52*B72+B32*B41*B82+B32*B42*B81-B32*B51*B72-B32*B52*B71;
  coeffs[5] = B11*B52*B93+B11*B53*B92-B11*B62*B83-B11*B63*B82+B12*B51*B93+B12*B53*B91-B12*B61*B83-B12*B63*B81+B13*B51*B92+B13*B52*B91-B13*B61*B82-B13*B62*B81-B21*B42*B93-B21*B43*B92+B21*B62*B73+B21*B63*B72-B22*B41*B93-B22*B43*B91+B22*B61*B73+B22*B63*B71-B23*B41*B92-B23*B42*B91+B23*B61*B72+B23*B62*B71+B31*B42*B83+B31*B43*B82-B31*B52*B73-B31*B53*B72+B32*B41*B83+B32*B43*B81-B32*B51*B73-B32*B53*B71+B33*B41*B82+B33*B42*B81-B33*B51*B72-B33*B52*B71;
  coeffs[6] = B11*B52*B94+B11*B54*B92-B11*B62*B84-B11*B64*B82+B12*B51*B94+B12*B54*B91-B12*B61*B84-B12*B64*B81+B14*B51*B92+B14*B52*B91-B14*B61*B82-B14*B62*B81-B21*B42*B94-B21*B44*B92+B21*B62*B74+B21*B64*B72-B22*B41*B94-B22*B44*B91+B22*B61*B74+B22*B64*B71-B24*B41*B92-B24*B42*B91+B24*B61*B72+B24*B62*B71+B31*B42*B84+B31*B44*B82-B31*B52*B74-B31*B54*B72+B32*B41*B84+B32*B44*B81-B32*B51*B74-B32*B54*B71+B34*B41*B82+B34*B42*B81-B34*B51*B72-B34*B52*B71;
  coeffs[7] = B11*B53*B93-B11*B63*B83+B13*B51*B93+B13*B53*B91-B13*B61*B83-B13*B63*B81-B21*B43*B93+B21*B63*B73-B23*B41*B93-B23*B43*B91+B23*B61*B73+B23*B63*B71+B31*B43*B83-B31*B53*B73+B33*B41*B83+B33*B43*B81-B33*B51*B73-B33*B53*B71;
  coeffs[8] = B11*B53*B94+B11*B54*B93-B11*B63*B84-B11*B64*B83+B13*B51*B94+B13*B54*B91-B13*B61*B84-B13*B64*B81+B14*B51*B93+B14*B53*B91-B14*B61*B83-B14*B63*B81-B21*B43*B94-B21*B44*B93+B21*B63*B74+B21*B64*B73-B23*B41*B94-B23*B44*B91+B23*B61*B74+B23*B64*B71-B24*B41*B93-B24*B43*B91+B24*B61*B73+B24*B63*B71+B31*B43*B84+B31*B44*B83-B31*B53*B74-B31*B54*B73+B33*B41*B84+B33*B44*B81-B33*B51*B74-B33*B54*B71+B34*B41*B83+B34*B43*B81-B34*B51*B73-B34*B53*B71;
  coeffs[9] = B11*B54*B94-B11*B64*B84+B14*B51*B94+B14*B54*B91-B14*B61*B84-B14*B64*B81-B21*B44*B94+B21*B64*B74-B24*B41*B94-B24*B44*B91+B24*B61*B74+B24*B64*B71+B31*B44*B84-B31*B54*B74+B34*B41*B84+B34*B44*B81-B34*B51*B74-B34*B54*B71;
  coeffs[10] = B12*B52*B92-B12*B62*B82-B22*B42*B92+B22*B62*B72+B32*B42*B82-B32*B52*B72;
  coeffs[11] = B12*B52*B93+B12*B53*B92-B12*B62*B83-B12*B63*B82+B13*B52*B92-B13*B62*B82-B22*B42*B93-B22*B43*B92+B22*B62*B73+B22*B63*B72-B23*B42*B92+B23*B62*B72+B32*B42*B83+B32*B43*B82-B32*B52*B73-B32*B53*B72+B33*B42*B82-B33*B52*B72;
  coeffs[12] = B12*B52*B94+B12*B54*B92-B12*B62*B84-B12*B64*B82+B14*B52*B92-B14*B62*B82-B22*B42*B94-B22*B44*B92+B22*B62*B74+B22*B64*B72-B24*B42*B92+B24*B62*B72+B32*B42*B84+B32*B44*B82-B32*B52*B74-B32*B54*B72+B34*B42*B82-B34*B52*B72;
  coeffs[13] = B12*B53*B93-B12*B63*B83+B13*B52*B93+B13*B53*B92-B13*B62*B83-B13*B63*B82-B22*B43*B93+B22*B63*B73-B23*B42*B93-B23*B43*B92+B23*B62*B73+B23*B63*B72+B32*B43*B83-B32*B53*B73+B33*B42*B83+B33*B43*B82-B33*B52*B73-B33*B53*B72;
  coeffs[14] = B12*B53*B94+B12*B54*B93-B12*B63*B84-B12*B64*B83+B13*B52*B94+B13*B54*B92-B13*B62*B84-B13*B64*B82+B14*B52*B93+B14*B53*B92-B14*B62*B83-B14*B63*B82-B22*B43*B94-B22*B44*B93+B22*B63*B74+B22*B64*B73-B23*B42*B94-B23*B44*B92+B23*B62*B74+B23*B64*B72-B24*B42*B93-B24*B43*B92+B24*B62*B73+B24*B63*B72+B32*B43*B84+B32*B44*B83-B32*B53*B74-B32*B54*B73+B33*B42*B84+B33*B44*B82-B33*B52*B74-B33*B54*B72+B34*B42*B83+B34*B43*B82-B34*B52*B73-B34*B53*B72;
  coeffs[15] = B12*B54*B94-B12*B64*B84+B14*B52*B94+B14*B54*B92-B14*B62*B84-B14*B64*B82-B22*B44*B94+B22*B64*B74-B24*B42*B94-B24*B44*B92+B24*B62*B74+B24*B64*B72+B32*B44*B84-B32*B54*B74+B34*B42*B84+B34*B44*B82-B34*B52*B74-B34*B54*B72;
  coeffs[16] = B13*B53*B93-B13*B63*B83-B23*B43*B93+B23*B63*B73+B33*B43*B83-B33*B53*B73;
  coeffs[17] = B13*B53*B94+B13*B54*B93-B13*B63*B84-B13*B64*B83+B14*B53*B93-B14*B63*B83-B23*B43*B94-B23*B44*B93+B23*B63*B74+B23*B64*B73-B24*B43*B93+B24*B63*B73+B33*B43*B84+B33*B44*B83-B33*B53*B74-B33*B54*B73+B34*B43*B83-B34*B53*B73;
  coeffs[18] = B13*B54*B94-B13*B64*B84+B14*B53*B94+B14*B54*B93-B14*B63*B84-B14*B64*B83-B23*B44*B94+B23*B64*B74-B24*B43*B94-B24*B44*B93+B24*B63*B74+B24*B64*B73+B33*B44*B84-B33*B54*B74+B34*B43*B84+B34*B44*B83-B34*B53*B74-B34*B54*B73;
  coeffs[19] = B14*B54*B94-B14*B64*B84-B24*B44*B94+B24*B64*B74+B34*B44*B84-B34*B54*B74;
  coeffs[20] = B21*_t332_+B11*_t356_+B31*_t336_-B11*_t386_;
  coeffs[21] = B11*_t326_+B22*_t332_+B12*_t356_+B32*_t336_+B21*_t368_-B12*_t386_-B11*_t390_+B31*_t374_;
  coeffs[22] = B11*_t327_+B23*_t332_+B13*_t356_+B33*_t336_+B21*_t369_-B13*_t386_-B11*_t391_+B31*_t375_;
  coeffs[23] = B11*_t328_+B24*_t332_+B14*_t356_+B34*_t336_+B21*_t370_-B14*_t386_-B11*_t392_+B31*_t376_;
  coeffs[24] = B12*_t326_+B21*_t333_+B11*_t357_+B31*_t337_+B22*_t368_-B11*_t387_-B12*_t390_+B32*_t374_;
  coeffs[25] = B12*_t327_+B13*_t326_+B11*_t329_+B22*_t369_+B23*_t368_+B21*_t371_-B12*_t391_-B13*_t390_-B11*_t393_+B32*_t375_+B33*_t374_+B31*_t377_;
  coeffs[26] = B12*_t328_+B14*_t326_+B11*_t330_+B22*_t370_+B24*_t368_+B21*_t372_-B12*_t392_-B14*_t390_-B11*_t394_+B32*_t376_+B34*_t374_+B31*_t378_;
  coeffs[27] = B13*_t327_+B21*_t334_+B11*_t358_+B31*_t339_+B23*_t369_-B11*_t388_-B13*_t391_+B33*_t375_;
  coeffs[28] = B13*_t328_+B14*_t327_+B11*_t331_+B23*_t370_+B24*_t369_+B21*_t373_-B13*_t392_-B14*_t391_-B11*_t395_+B33*_t376_+B34*_t375_+B31*_t379_;
  coeffs[29] = B14*_t328_+B21*_t335_+B11*_t359_+B31*_t343_+B24*_t370_-B11*_t389_-B14*_t392_+B34*_t376_;
  coeffs[30] = B22*_t333_+B12*_t357_+B32*_t337_-B12*_t387_;
  coeffs[31] = B12*_t329_+B23*_t333_+B13*_t357_+B33*_t337_+B22*_t371_-B13*_t387_-B12*_t393_+B32*_t377_;
  coeffs[32] = B12*_t330_+B24*_t333_+B14*_t357_+B34*_t337_+B22*_t372_-B14*_t387_-B12*_t394_+B32*_t378_;
  coeffs[33] = B13*_t329_+B22*_t334_+B12*_t358_+B32*_t339_+B23*_t371_-B12*_t388_-B13*_t393_+B33*_t377_;
  coeffs[34] = B12*_t331_+B13*_t330_+B14*_t329_+B22*_t373_+B23*_t372_+B24*_t371_-B12*_t395_-B13*_t394_-B14*_t393_+B32*_t379_+B33*_t378_+B34*_t377_;
  coeffs[35] = B14*_t330_+B22*_t335_+B12*_t359_+B32*_t343_+B24*_t372_-B12*_t389_-B14*_t394_+B34*_t378_;
  coeffs[36] = B23*_t334_+B13*_t358_+B33*_t339_-B13*_t388_;
  coeffs[37] = B13*_t331_+B24*_t334_+B14*_t358_+B34*_t339_+B23*_t373_-B14*_t388_-B13*_t395_+B33*_t379_;
  coeffs[38] = B14*_t331_+B23*_t335_+B13*_t359_+B33*_t343_+B24*_t373_-B13*_t389_-B14*_t395_+B34*_t379_;
  coeffs[39] = B24*_t335_+B14*_t359_+B34*_t343_-B14*_t389_;
  coeffs[40] = B11*_t332_+B31*_t346_+B21*_t360_-B21*_t386_;
  coeffs[41] = B12*_t332_+B21*_t338_+B32*_t346_+B11*_t368_+B22*_t360_-B22*_t386_-B21*_t390_+B31*_t380_;
  coeffs[42] = B13*_t332_+B21*_t340_+B33*_t346_+B11*_t369_+B23*_t360_-B23*_t386_-B21*_t391_+B31*_t381_;
  coeffs[43] = B14*_t332_+B21*_t341_+B34*_t346_+B11*_t370_+B24*_t360_-B24*_t386_-B21*_t392_+B31*_t382_;
  coeffs[44] = B11*_t333_+B22*_t338_+B31*_t347_+B12*_t368_+B21*_t361_-B21*_t387_-B22*_t390_+B32*_t380_;
  coeffs[45] = B23*_t338_+B22*_t340_+B21*_t342_+B12*_t369_+B13*_t368_+B11*_t371_-B22*_t391_-B23*_t390_+B32*_t381_+B33*_t380_-B21*_t393_+B31*_t383_;
  coeffs[46] = B24*_t338_+B22*_t341_+B21*_t344_+B12*_t370_+B14*_t368_+B11*_t372_-B22*_t392_-B24*_t390_+B32*_t382_+B34*_t380_-B21*_t394_+B31*_t384_;
  coeffs[47] = B11*_t334_+B23*_t340_+B31*_t348_+B13*_t369_+B21*_t362_-B21*_t388_-B23*_t391_+B33*_t381_;
  coeffs[48] = B23*_t341_+B24*_t340_+B21*_t345_+B13*_t370_+B14*_t369_+B11*_t373_-B23*_t392_-B24*_t391_+B33*_t382_+B34*_t381_-B21*_t395_+B31*_t385_;
  coeffs[49] = B11*_t335_+B24*_t341_+B31*_t349_+B14*_t370_+B21*_t363_-B21*_t389_-B24*_t392_+B34*_t382_;
  coeffs[50] = B12*_t333_+B32*_t347_+B22*_t361_-B22*_t387_;
  coeffs[51] = B13*_t333_+B22*_t342_+B33*_t347_+B12*_t371_+B23*_t361_-B23*_t387_-B22*_t393_+B32*_t383_;
  coeffs[52] = B14*_t333_+B22*_t344_+B34*_t347_+B12*_t372_+B24*_t361_-B24*_t387_-B22*_t394_+B32*_t384_;
  coeffs[53] = B12*_t334_+B23*_t342_+B32*_t348_+B13*_t371_+B22*_t362_-B22*_t388_-B23*_t393_+B33*_t383_;
  coeffs[54] = B24*_t342_+B22*_t345_+B23*_t344_+B12*_t373_+B13*_t372_+B14*_t371_-B22*_t395_-B23*_t394_-B24*_t393_+B32*_t385_+B33*_t384_+B34*_t383_;
  coeffs[55] = B12*_t335_+B24*_t344_+B32*_t349_+B22*_t363_+B14*_t372_-B22*_t389_-B24*_t394_+B34*_t384_;
  coeffs[56] = B13*_t334_+B33*_t348_+B23*_t362_-B23*_t388_;
  coeffs[57] = B14*_t334_+B23*_t345_+B34*_t348_+B13*_t373_+B24*_t362_-B24*_t388_-B23*_t395_+B33*_t385_;
  coeffs[58] = B13*_t335_+B24*_t345_+B33*_t349_+B23*_t363_+B14*_t373_-B23*_t389_-B24*_t395_+B34*_t385_;
  coeffs[59] = B14*_t335_+B34*_t349_+B24*_t363_-B24*_t389_;
  coeffs[60] = B11*_t336_+B21*_t346_+B31*_t364_-B31*_t386_;
  coeffs[61] = B12*_t336_+B22*_t346_+B31*_t350_+B11*_t374_+B32*_t364_+B21*_t380_-B32*_t386_-B31*_t390_;
  coeffs[62] = B13*_t336_+B23*_t346_+B31*_t351_+B11*_t375_+B33*_t364_+B21*_t381_-B33*_t386_-B31*_t391_;
  coeffs[63] = B14*_t336_+B24*_t346_+B31*_t352_+B11*_t376_+B34*_t364_+B21*_t382_-B34*_t386_-B31*_t392_;
  coeffs[64] = B11*_t337_+B21*_t347_+B32*_t350_+B12*_t374_+B31*_t365_+B22*_t380_-B31*_t387_-B32*_t390_;
  coeffs[65] = B32*_t351_+B33*_t350_+B31*_t353_+B12*_t375_+B13*_t374_+B11*_t377_+B22*_t381_+B23*_t380_+B21*_t383_-B32*_t391_-B33*_t390_-B31*_t393_;
  coeffs[66] = B32*_t352_+B34*_t350_+B31*_t354_+B12*_t376_+B14*_t374_+B11*_t378_+B22*_t382_+B24*_t380_+B21*_t384_-B32*_t392_-B34*_t390_-B31*_t394_;
  coeffs[67] = B11*_t339_+B21*_t348_+B33*_t351_+B13*_t375_+B31*_t366_+B23*_t381_-B31*_t388_-B33*_t391_;
  coeffs[68] = B33*_t352_+B34*_t351_+B31*_t355_+B13*_t376_+B14*_t375_+B11*_t379_+B23*_t382_+B24*_t381_+B21*_t385_-B33*_t392_-B34*_t391_-B31*_t395_;
  coeffs[69] = B11*_t343_+B21*_t349_+B34*_t352_+B14*_t376_+B31*_t367_+B24*_t382_-B31*_t389_-B34*_t392_;
  coeffs[70] = B12*_t337_+B22*_t347_+B32*_t365_-B32*_t387_;
  coeffs[71] = B13*_t337_+B23*_t347_+B32*_t353_+B12*_t377_+B33*_t365_+B22*_t383_-B33*_t387_-B32*_t393_;
  coeffs[72] = B14*_t337_+B24*_t347_+B32*_t354_+B12*_t378_+B34*_t365_+B22*_t384_-B34*_t387_-B32*_t394_;
  coeffs[73] = B12*_t339_+B22*_t348_+B33*_t353_+B13*_t377_+B32*_t366_+B23*_t383_-B32*_t388_-B33*_t393_;
  coeffs[74] = B32*_t355_+B33*_t354_+B34*_t353_+B12*_t379_+B13*_t378_+B14*_t377_+B22*_t385_+B23*_t384_+B24*_t383_-B32*_t395_-B33*_t394_-B34*_t393_;
  coeffs[75] = B12*_t343_+B22*_t349_+B34*_t354_+B14*_t378_+B32*_t367_+B24*_t384_-B32*_t389_-B34*_t394_;
  coeffs[76] = B13*_t339_+B23*_t348_+B33*_t366_-B33*_t388_;
  coeffs[77] = B14*_t339_+B24*_t348_+B33*_t355_+B13*_t379_+B34*_t366_+B23*_t385_-B34*_t388_-B33*_t395_;
  coeffs[78] = B13*_t343_+B23*_t349_+B34*_t355_+B14*_t379_+B33*_t367_+B24*_t385_-B33*_t389_-B34*_t395_;
  coeffs[79] = B14*_t343_+B24*_t349_+B34*_t367_-B34*_t389_;
  coeffs[80] = B51*_t332_+B41*_t356_+B61*_t336_-B41*_t386_;
  coeffs[81] = B41*_t326_+B52*_t332_+B42*_t356_+B62*_t336_+B51*_t368_-B42*_t386_-B41*_t390_+B61*_t374_;
  coeffs[82] = B41*_t327_+B53*_t332_+B43*_t356_+B63*_t336_+B51*_t369_-B43*_t386_-B41*_t391_+B61*_t375_;
  coeffs[83] = B41*_t328_+B54*_t332_+B44*_t356_+B64*_t336_+B51*_t370_-B44*_t386_-B41*_t392_+B61*_t376_;
  coeffs[84] = B42*_t326_+B51*_t333_+B41*_t357_+B61*_t337_+B52*_t368_-B41*_t387_-B42*_t390_+B62*_t374_;
  coeffs[85] = B42*_t327_+B43*_t326_+B41*_t329_+B52*_t369_+B53*_t368_+B51*_t371_-B42*_t391_-B43*_t390_-B41*_t393_+B62*_t375_+B63*_t374_+B61*_t377_;
  coeffs[86] = B42*_t328_+B44*_t326_+B41*_t330_+B52*_t370_+B54*_t368_+B51*_t372_-B42*_t392_-B44*_t390_-B41*_t394_+B62*_t376_+B64*_t374_+B61*_t378_;
  coeffs[87] = B43*_t327_+B51*_t334_+B41*_t358_+B61*_t339_+B53*_t369_-B41*_t388_-B43*_t391_+B63*_t375_;
  coeffs[88] = B43*_t328_+B44*_t327_+B41*_t331_+B53*_t370_+B54*_t369_+B51*_t373_-B43*_t392_-B44*_t391_-B41*_t395_+B63*_t376_+B64*_t375_+B61*_t379_;
  coeffs[89] = B44*_t328_+B51*_t335_+B41*_t359_+B61*_t343_+B54*_t370_-B41*_t389_-B44*_t392_+B64*_t376_;
  coeffs[90] = B52*_t333_+B42*_t357_+B62*_t337_-B42*_t387_;
  coeffs[91] = B42*_t329_+B53*_t333_+B43*_t357_+B63*_t337_+B52*_t371_-B43*_t387_-B42*_t393_+B62*_t377_;
  coeffs[92] = B42*_t330_+B54*_t333_+B44*_t357_+B64*_t337_+B52*_t372_-B44*_t387_-B42*_t394_+B62*_t378_;
  coeffs[93] = B43*_t329_+B52*_t334_+B42*_t358_+B62*_t339_+B53*_t371_-B42*_t388_-B43*_t393_+B63*_t377_;
  coeffs[94] = B42*_t331_+B43*_t330_+B44*_t329_+B52*_t373_+B53*_t372_+B54*_t371_-B42*_t395_-B43*_t394_-B44*_t393_+B62*_t379_+B63*_t378_+B64*_t377_;
  coeffs[95] = B44*_t330_+B52*_t335_+B42*_t359_+B62*_t343_+B54*_t372_-B42*_t389_-B44*_t394_+B64*_t378_;
  coeffs[96] = B53*_t334_+B43*_t358_+B63*_t339_-B43*_t388_;
  coeffs[97] = B43*_t331_+B54*_t334_+B44*_t358_+B64*_t339_+B53*_t373_-B44*_t388_-B43*_t395_+B63*_t379_;
  coeffs[98] = B44*_t331_+B53*_t335_+B43*_t359_+B63*_t343_+B54*_t373_-B43*_t389_-B44*_t395_+B64*_t379_;
  coeffs[99] = B54*_t335_+B44*_t359_+B64*_t343_-B44*_t389_;
  coeffs[100] = B41*_t332_+B61*_t346_+B51*_t360_-B51*_t386_;
  coeffs[101] = B42*_t332_+B51*_t338_+B62*_t346_+B41*_t368_+B52*_t360_-B52*_t386_-B51*_t390_+B61*_t380_;
  coeffs[102] = B43*_t332_+B51*_t340_+B63*_t346_+B41*_t369_+B53*_t360_-B53*_t386_-B51*_t391_+B61*_t381_;
  coeffs[103] = B44*_t332_+B51*_t341_+B64*_t346_+B41*_t370_+B54*_t360_-B54*_t386_-B51*_t392_+B61*_t382_;
  coeffs[104] = B41*_t333_+B52*_t338_+B61*_t347_+B42*_t368_+B51*_t361_-B51*_t387_-B52*_t390_+B62*_t380_;
  coeffs[105] = B53*_t338_+B52*_t340_+B51*_t342_+B42*_t369_+B43*_t368_+B41*_t371_-B52*_t391_-B53*_t390_+B62*_t381_+B63*_t380_-B51*_t393_+B61*_t383_;
  coeffs[106] = B54*_t338_+B52*_t341_+B51*_t344_+B42*_t370_+B44*_t368_+B41*_t372_-B52*_t392_-B54*_t390_+B62*_t382_+B64*_t380_-B51*_t394_+B61*_t384_;
  coeffs[107] = B41*_t334_+B53*_t340_+B61*_t348_+B43*_t369_+B51*_t362_-B51*_t388_-B53*_t391_+B63*_t381_;
  coeffs[108] = B53*_t341_+B54*_t340_+B51*_t345_+B43*_t370_+B44*_t369_+B41*_t373_-B53*_t392_-B54*_t391_+B63*_t382_+B64*_t381_-B51*_t395_+B61*_t385_;
  coeffs[109] = B41*_t335_+B54*_t341_+B61*_t349_+B44*_t370_+B51*_t363_-B51*_t389_-B54*_t392_+B64*_t382_;
  coeffs[110] = B42*_t333_+B62*_t347_+B52*_t361_-B52*_t387_;
  coeffs[111] = B43*_t333_+B52*_t342_+B63*_t347_+B42*_t371_+B53*_t361_-B53*_t387_-B52*_t393_+B62*_t383_;
  coeffs[112] = B44*_t333_+B52*_t344_+B64*_t347_+B42*_t372_+B54*_t361_-B54*_t387_-B52*_t394_+B62*_t384_;
  coeffs[113] = B42*_t334_+B53*_t342_+B62*_t348_+B43*_t371_+B52*_t362_-B52*_t388_-B53*_t393_+B63*_t383_;
  coeffs[114] = B54*_t342_+B52*_t345_+B53*_t344_+B42*_t373_+B43*_t372_+B44*_t371_-B52*_t395_-B53*_t394_-B54*_t393_+B62*_t385_+B63*_t384_+B64*_t383_;
  coeffs[115] = B42*_t335_+B54*_t344_+B62*_t349_+B52*_t363_+B44*_t372_-B52*_t389_-B54*_t394_+B64*_t384_;
  coeffs[116] = B43*_t334_+B63*_t348_+B53*_t362_-B53*_t388_;
  coeffs[117] = B44*_t334_+B53*_t345_+B64*_t348_+B43*_t373_+B54*_t362_-B54*_t388_-B53*_t395_+B63*_t385_;
  coeffs[118] = B43*_t335_+B54*_t345_+B63*_t349_+B53*_t363_+B44*_t373_-B53*_t389_-B54*_t395_+B64*_t385_;
  coeffs[119] = B44*_t335_+B64*_t349_+B54*_t363_-B54*_t389_;
  coeffs[120] = B41*_t336_+B51*_t346_+B61*_t364_-B61*_t386_;
  coeffs[121] = B42*_t336_+B52*_t346_+B61*_t350_+B41*_t374_+B62*_t364_+B51*_t380_-B62*_t386_-B61*_t390_;
  coeffs[122] = B43*_t336_+B53*_t346_+B61*_t351_+B41*_t375_+B63*_t364_+B51*_t381_-B63*_t386_-B61*_t391_;
  coeffs[123] = B44*_t336_+B54*_t346_+B61*_t352_+B41*_t376_+B64*_t364_+B51*_t382_-B64*_t386_-B61*_t392_;
  coeffs[124] = B41*_t337_+B51*_t347_+B62*_t350_+B42*_t374_+B61*_t365_+B52*_t380_-B61*_t387_-B62*_t390_;
  coeffs[125] = B62*_t351_+B63*_t350_+B61*_t353_+B42*_t375_+B43*_t374_+B41*_t377_+B52*_t381_+B53*_t380_+B51*_t383_-B62*_t391_-B63*_t390_-B61*_t393_;
  coeffs[126] = B62*_t352_+B64*_t350_+B61*_t354_+B42*_t376_+B44*_t374_+B41*_t378_+B52*_t382_+B54*_t380_+B51*_t384_-B62*_t392_-B64*_t390_-B61*_t394_;
  coeffs[127] = B41*_t339_+B51*_t348_+B63*_t351_+B43*_t375_+B61*_t366_+B53*_t381_-B61*_t388_-B63*_t391_;
  coeffs[128] = B63*_t352_+B64*_t351_+B61*_t355_+B43*_t376_+B44*_t375_+B41*_t379_+B53*_t382_+B54*_t381_+B51*_t385_-B63*_t392_-B64*_t391_-B61*_t395_;
  coeffs[129] = B41*_t343_+B51*_t349_+B64*_t352_+B44*_t376_+B61*_t367_+B54*_t382_-B61*_t389_-B64*_t392_;
  coeffs[130] = B42*_t337_+B52*_t347_+B62*_t365_-B62*_t387_;
  coeffs[131] = B43*_t337_+B53*_t347_+B62*_t353_+B42*_t377_+B63*_t365_+B52*_t383_-B63*_t387_-B62*_t393_;
  coeffs[132] = B44*_t337_+B54*_t347_+B62*_t354_+B42*_t378_+B64*_t365_+B52*_t384_-B64*_t387_-B62*_t394_;
  coeffs[133] = B42*_t339_+B52*_t348_+B63*_t353_+B43*_t377_+B62*_t366_+B53*_t383_-B62*_t388_-B63*_t393_;
  coeffs[134] = B62*_t355_+B63*_t354_+B64*_t353_+B42*_t379_+B43*_t378_+B44*_t377_+B52*_t385_+B53*_t384_+B54*_t383_-B62*_t395_-B63*_t394_-B64*_t393_;
  coeffs[135] = B42*_t343_+B52*_t349_+B64*_t354_+B44*_t378_+B62*_t367_+B54*_t384_-B62*_t389_-B64*_t394_;
  coeffs[136] = B43*_t339_+B53*_t348_+B63*_t366_-B63*_t388_;
  coeffs[137] = B44*_t339_+B54*_t348_+B63*_t355_+B43*_t379_+B64*_t366_+B53*_t385_-B64*_t388_-B63*_t395_;
  coeffs[138] = B43*_t343_+B53*_t349_+B64*_t355_+B44*_t379_+B63*_t367_+B54*_t385_-B63*_t389_-B64*_t395_;
  coeffs[139] = B44*_t343_+B54*_t349_+B64*_t367_-B64*_t389_;
  coeffs[140] = B81*_t332_+B71*_t356_+B91*_t336_-B71*_t386_;
  coeffs[141] = B71*_t326_+B82*_t332_+B72*_t356_+B92*_t336_+B81*_t368_-B72*_t386_-B71*_t390_+B91*_t374_;
  coeffs[142] = B71*_t327_+B83*_t332_+B73*_t356_+B93*_t336_+B81*_t369_-B73*_t386_-B71*_t391_+B91*_t375_;
  coeffs[143] = B71*_t328_+B84*_t332_+B74*_t356_+B94*_t336_+B81*_t370_-B74*_t386_-B71*_t392_+B91*_t376_;
  coeffs[144] = B72*_t326_+B81*_t333_+B71*_t357_+B91*_t337_+B82*_t368_-B71*_t387_-B72*_t390_+B92*_t374_;
  coeffs[145] = B72*_t327_+B73*_t326_+B71*_t329_+B82*_t369_+B83*_t368_+B81*_t371_-B72*_t391_-B73*_t390_-B71*_t393_+B92*_t375_+B93*_t374_+B91*_t377_;
  coeffs[146] = B72*_t328_+B74*_t326_+B71*_t330_+B82*_t370_+B84*_t368_+B81*_t372_-B72*_t392_-B74*_t390_-B71*_t394_+B92*_t376_+B94*_t374_+B91*_t378_;
  coeffs[147] = B73*_t327_+B81*_t334_+B71*_t358_+B91*_t339_+B83*_t369_-B71*_t388_-B73*_t391_+B93*_t375_;
  coeffs[148] = B73*_t328_+B74*_t327_+B71*_t331_+B83*_t370_+B84*_t369_+B81*_t373_-B73*_t392_-B74*_t391_-B71*_t395_+B93*_t376_+B94*_t375_+B91*_t379_;
  coeffs[149] = B74*_t328_+B81*_t335_+B71*_t359_+B91*_t343_+B84*_t370_-B71*_t389_-B74*_t392_+B94*_t376_;
  coeffs[150] = B82*_t333_+B72*_t357_+B92*_t337_-B72*_t387_;
  coeffs[151] = B72*_t329_+B83*_t333_+B73*_t357_+B93*_t337_+B82*_t371_-B73*_t387_-B72*_t393_+B92*_t377_;
  coeffs[152] = B72*_t330_+B84*_t333_+B74*_t357_+B94*_t337_+B82*_t372_-B74*_t387_-B72*_t394_+B92*_t378_;
  coeffs[153] = B73*_t329_+B82*_t334_+B72*_t358_+B92*_t339_+B83*_t371_-B72*_t388_-B73*_t393_+B93*_t377_;
  coeffs[154] = B72*_t331_+B73*_t330_+B74*_t329_+B82*_t373_+B83*_t372_+B84*_t371_-B72*_t395_-B73*_t394_-B74*_t393_+B92*_t379_+B93*_t378_+B94*_t377_;
  coeffs[155] = B74*_t330_+B82*_t335_+B72*_t359_+B92*_t343_+B84*_t372_-B72*_t389_-B74*_t394_+B94*_t378_;
  coeffs[156] = B83*_t334_+B73*_t358_+B93*_t339_-B73*_t388_;
  coeffs[157] = B73*_t331_+B84*_t334_+B74*_t358_+B94*_t339_+B83*_t373_-B74*_t388_-B73*_t395_+B93*_t379_;
  coeffs[158] = B74*_t331_+B83*_t335_+B73*_t359_+B93*_t343_+B84*_t373_-B73*_t389_-B74*_t395_+B94*_t379_;
  coeffs[159] = B84*_t335_+B74*_t359_+B94*_t343_-B74*_t389_;
  coeffs[160] = B71*_t332_+B91*_t346_+B81*_t360_-B81*_t386_;
  coeffs[161] = B72*_t332_+B81*_t338_+B92*_t346_+B71*_t368_+B82*_t360_-B82*_t386_-B81*_t390_+B91*_t380_;
  coeffs[162] = B73*_t332_+B81*_t340_+B93*_t346_+B71*_t369_+B83*_t360_-B83*_t386_-B81*_t391_+B91*_t381_;
  coeffs[163] = B74*_t332_+B81*_t341_+B94*_t346_+B71*_t370_+B84*_t360_-B84*_t386_-B81*_t392_+B91*_t382_;
  coeffs[164] = B71*_t333_+B82*_t338_+B91*_t347_+B72*_t368_+B81*_t361_-B81*_t387_-B82*_t390_+B92*_t380_;
  coeffs[165] = B83*_t338_+B82*_t340_+B81*_t342_+B72*_t369_+B73*_t368_+B71*_t371_-B82*_t391_-B83*_t390_+B92*_t381_+B93*_t380_-B81*_t393_+B91*_t383_;
  coeffs[166] = B84*_t338_+B82*_t341_+B81*_t344_+B72*_t370_+B74*_t368_+B71*_t372_-B82*_t392_-B84*_t390_+B92*_t382_+B94*_t380_-B81*_t394_+B91*_t384_;
  coeffs[167] = B71*_t334_+B83*_t340_+B91*_t348_+B73*_t369_+B81*_t362_-B81*_t388_-B83*_t391_+B93*_t381_;
  coeffs[168] = B83*_t341_+B84*_t340_+B81*_t345_+B73*_t370_+B74*_t369_+B71*_t373_-B83*_t392_-B84*_t391_+B93*_t382_+B94*_t381_-B81*_t395_+B91*_t385_;
  coeffs[169] = B71*_t335_+B84*_t341_+B91*_t349_+B74*_t370_+B81*_t363_-B81*_t389_-B84*_t392_+B94*_t382_;
  coeffs[170] = B72*_t333_+B92*_t347_+B82*_t361_-B82*_t387_;
  coeffs[171] = B73*_t333_+B82*_t342_+B93*_t347_+B72*_t371_+B83*_t361_-B83*_t387_-B82*_t393_+B92*_t383_;
  coeffs[172] = B74*_t333_+B82*_t344_+B94*_t347_+B72*_t372_+B84*_t361_-B84*_t387_-B82*_t394_+B92*_t384_;
  coeffs[173] = B72*_t334_+B83*_t342_+B92*_t348_+B73*_t371_+B82*_t362_-B82*_t388_-B83*_t393_+B93*_t383_;
  coeffs[174] = B84*_t342_+B82*_t345_+B83*_t344_+B72*_t373_+B73*_t372_+B74*_t371_-B82*_t395_-B83*_t394_-B84*_t393_+B92*_t385_+B93*_t384_+B94*_t383_;
  coeffs[175] = B72*_t335_+B84*_t344_+B92*_t349_+B82*_t363_+B74*_t372_-B82*_t389_-B84*_t394_+B94*_t384_;
  coeffs[176] = B73*_t334_+B93*_t348_+B83*_t362_-B83*_t388_;
  coeffs[177] = B74*_t334_+B83*_t345_+B94*_t348_+B73*_t373_+B84*_t362_-B84*_t388_-B83*_t395_+B93*_t385_;
  coeffs[178] = B73*_t335_+B84*_t345_+B93*_t349_+B83*_t363_+B74*_t373_-B83*_t389_-B84*_t395_+B94*_t385_;
  coeffs[179] = B74*_t335_+B94*_t349_+B84*_t363_-B84*_t389_;
  coeffs[180] = B71*_t336_+B81*_t346_+B91*_t364_-B91*_t386_;
  coeffs[181] = B72*_t336_+B82*_t346_+B91*_t350_+B71*_t374_+B92*_t364_+B81*_t380_-B92*_t386_-B91*_t390_;
  coeffs[182] = B73*_t336_+B83*_t346_+B91*_t351_+B71*_t375_+B93*_t364_+B81*_t381_-B93*_t386_-B91*_t391_;
  coeffs[183] = B74*_t336_+B84*_t346_+B91*_t352_+B71*_t376_+B94*_t364_+B81*_t382_-B94*_t386_-B91*_t392_;
  coeffs[184] = B71*_t337_+B81*_t347_+B92*_t350_+B72*_t374_+B91*_t365_+B82*_t380_-B91*_t387_-B92*_t390_;
  coeffs[185] = B92*_t351_+B93*_t350_+B91*_t353_+B72*_t375_+B73*_t374_+B71*_t377_+B82*_t381_+B83*_t380_+B81*_t383_-B92*_t391_-B93*_t390_-B91*_t393_;
  coeffs[186] = B92*_t352_+B94*_t350_+B91*_t354_+B72*_t376_+B74*_t374_+B71*_t378_+B82*_t382_+B84*_t380_+B81*_t384_-B92*_t392_-B94*_t390_-B91*_t394_;
  coeffs[187] = B71*_t339_+B81*_t348_+B93*_t351_+B73*_t375_+B91*_t366_+B83*_t381_-B91*_t388_-B93*_t391_;
  coeffs[188] = B93*_t352_+B94*_t351_+B91*_t355_+B73*_t376_+B74*_t375_+B71*_t379_+B83*_t382_+B84*_t381_+B81*_t385_-B93*_t392_-B94*_t391_-B91*_t395_;
  coeffs[189] = B71*_t343_+B81*_t349_+B94*_t352_+B74*_t376_+B91*_t367_+B84*_t382_-B91*_t389_-B94*_t392_;
  coeffs[190] = B72*_t337_+B82*_t347_+B92*_t365_-B92*_t387_;
  coeffs[191] = B73*_t337_+B83*_t347_+B92*_t353_+B72*_t377_+B93*_t365_+B82*_t383_-B93*_t387_-B92*_t393_;
  coeffs[192] = B74*_t337_+B84*_t347_+B92*_t354_+B72*_t378_+B94*_t365_+B82*_t384_-B94*_t387_-B92*_t394_;
  coeffs[193] = B72*_t339_+B82*_t348_+B93*_t353_+B73*_t377_+B92*_t366_+B83*_t383_-B92*_t388_-B93*_t393_;
  coeffs[194] = B92*_t355_+B93*_t354_+B94*_t353_+B72*_t379_+B73*_t378_+B74*_t377_+B82*_t385_+B83*_t384_+B84*_t383_-B92*_t395_-B93*_t394_-B94*_t393_;
  coeffs[195] = B72*_t343_+B82*_t349_+B94*_t354_+B74*_t378_+B92*_t367_+B84*_t384_-B92*_t389_-B94*_t394_;
  coeffs[196] = B73*_t339_+B83*_t348_+B93*_t366_-B93*_t388_;
  coeffs[197] = B74*_t339_+B84*_t348_+B93*_t355_+B73*_t379_+B94*_t366_+B83*_t385_-B94*_t388_-B93*_t395_;
  coeffs[198] = B73*_t343_+B83*_t349_+B94*_t355_+B74*_t379_+B93*_t367_+B84*_t385_-B93*_t389_-B94*_t395_;
  coeffs[199] = B74*_t343_+B84*_t349_+B94*_t367_-B94*_t389_;


    // Setup elimination template
    static const int coeffs0_ind[] = { 10,30,50,70,90,110,130,150,170,190,11,31,51,71,91,111,131,151,171,191,13,33,53,73,93,113,133,153,173,193,16,36,56,76,96,116,136,156,176,196,0,20,40,60,80,100,120,140,160,180,1,21,41,61,81,101,121,141,161,181,2,22,42,62,82,102,122,142,162,182,4,24,44,64,84,104,124,144,164,184,5,25,45,65,85,105,125,145,165,185,7,27,47,67,87,107,127,147,167,187 };
    static const int coeffs1_ind[] = { 19,39,59,79,99,119,139,159,179,199,9,29,49,69,89,109,129,149,169,189,3,23,43,63,83,103,123,143,163,183,6,26,46,66,86,106,126,146,166,186,8,28,48,68,88,108,128,148,168,188,15,35,55,75,95,115,135,155,175,195,12,32,52,72,92,112,132,152,172,192,14,34,54,74,94,114,134,154,174,194,18,38,58,78,98,118,138,158,178,198,17,37,57,77,97,117,137,157,177,197 };
        

static const int C0_ind[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,
50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99};

static const int C1_ind[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,
50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99};

MatrixXd C0 = MatrixXd::Zero(10,10);
MatrixXd C1 = MatrixXd::Zero(10,10);
for (int i = 0; i < 100; i++) {
    C0(C0_ind[i]) = coeffs(coeffs0_ind[i]);
}

for (int i = 0; i < 100; i++) {
    C1(C1_ind[i]) = coeffs(coeffs1_ind[i]);
}

MatrixXd C12 = C0.fullPivLu().solve(C1);



    // Setup action matrix
    Matrix<double,16, 10> RR;
    RR << -C12.bottomRows(6), Matrix<double,10,10>::Identity(10, 10);

    static const int AM_ind[] = { 7,8,0,1,2,9,3,4,10,5 };
    Matrix<double, 10, 10> AM;
    for (int i = 0; i < 10; i++) {
        AM.row(i) = RR.row(AM_ind[i]);
    }

    MatrixXcd sols(3, 10);
    sols.setZero();

    // Solve eigenvalue problem
    EigenSolver<Matrix<double, 10, 10> > es(AM);
    ArrayXcd D = es.eigenvalues();    
    ArrayXXcd V = es.eigenvectors();

    V = (V / V.row(0).array().replicate(10, 1)).eval();


        sols.row(0) = D.transpose().array();
    sols.row(1) = V.row(5).array();
    sols.row(2) = V.row(8).array();





    Eigen::VectorXcd w1 = sols.row(0);
Eigen::VectorXcd w2 = sols.row(1);
Eigen::VectorXcd w3 = sols.row(2);
int nsols = w1.size();
for (int isol = 0; isol < nsols; ++isol) {
	Eigen::MatrixXcd _w(3, 1);
	_w(0) = w1(isol); 
	_w(1) = w2(isol); 
	_w(2) = w3(isol); 
	w->push_back(_w);
}


}

// Action = ; w3
// Quotient ring basis (V) =  w1^2, w1*w2, w1*w3, w2, w2^2, w2*w3, w3, w3^2
// Available monomials (RR*V) = w1^2*w2, w1^2*w3, w1*w2^2, w1*w2*w3, w1*w3^2, 1, w1, w1^2, w1*w2, w1*w3, w2, w2^2, w2*w3, w3, w3^2




